<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby on rails | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2018-11-12T19:02:34+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[常にjbuilderの値をescape]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/10/11/sanitize-jbuilder/"/>
        <updated>2018-10-11T12:27:37+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/10/11/sanitize-jbuilder</id>
        <content type="html"><![CDATA[<p>jbuliderを使っている時のapiの戻り値、js側でescapeするのかもしれませんが、サーバー側でやりたい時。</p>

<!-- more -->




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7039502723411845"
     data-ad-slot="8206045005"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<pre><code class="ruby"># config/initializers/escape_jbuilder_value
module EscapeJbuilderValue
  def method_missing(*args)
    option = args.extract_options!
    if !::Kernel.block_given? &amp;&amp; !option[:raw]
      if args[1].is_a?(String)
        args[1] = Haml::Util.html_safe(ERB::Util.html_escape(args[1]))
      end
    end
    super(*args)
  end
end

class Jbuilder
  prepend ::EscapeJbuilderValue
end
</code></pre>

<p>HamlつかっているのでHamlと同じescape処理をかけていますが、ここはお好みで(ApplicationController.helpers.sanitizeとかも)。</p>

<pre><code class="ruby">json.body '&lt;span&gt;raw&lt;/hoge&gt;', raw: true
</code></pre>

<p>とかやるとescapeされずに使えます。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[grape-jbuilderでtimezoneをなんとかする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/06/29/grape-jbuilder-timezone/"/>
        <updated>2018-06-29T15:47:34+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/06/29/grape-jbuilder-timezone</id>
        <content type="html"><![CDATA[<p>Grapeでtimezoneを考慮して日付を返す場合は<br/>
この<a href="https://t.co/Fqt42F1M3H">What is the best way to emulate <code>around_filter</code> when using Grape?</a>のようにgrapeのbeforeとafterを使って設定するのが定石な気がしますが。<br/>
<a href="https://github.com/milkcocoa/grape-jbuilder">grape-jbuilder</a>でjbuilderの中で書いた日付がbeforeで設定したtimezoneで表示してくれなかったので対応しました。</p>

<!-- more -->




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7039502723411845"
     data-ad-slot="8206045005"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>grapeのendpoint(controllerでいうactionみたいな)で返すとtimezoneが考慮されていますが、jbuilderの中では考慮されていないっぽい。<br/>
before -> grapeのendpointの処理 -> after -> jbuilderのrender<br/>
という順番で動いているからですね。</p>

<p>苦しいですがrenderの前後にtimezoneを変更するpatchをあてます。</p>

<pre><code class="ruby"># config/initializers/grape_jbuilder_patch.rb
module GrapeJbuilderPatch
  def call
    Time.zone = endpoint.current_user.time_zone # ユーザーのtimezoneを使う
    result = super
    Time.zone = Rails.configuration.time_zone # 戻す
    result
  end
end

module Grape
  module Formatter
    class Jbuilder
      prepend GrapeJbuilderPatch
    end
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Deviseちょっとしたtips２つ]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/05/08/devise-kowaza/"/>
        <updated>2018-05-08T10:38:56+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/05/08/devise-kowaza</id>
        <content type="html"><![CDATA[<p><a href="https://github.com/plataformatec/devise">Devise</a>の小技２つです。</p>

<!-- more -->




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7039502723411845"
     data-ad-slot="8206045005"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>１. deviseでログインに失敗した際にアクセスされたページを元に任意のページへ飛ばす。</p>

<pre><code class="ruby"># config/initializers/devise.rb
Devise.setup do |config|
  config.warden do |manager|
    manager.failure_app = CustomAuthenticationFailure
  end
end
</code></pre>

<pre><code class="ruby"># lib/custom_authentication_failure.rb
class CustomAuthenticationFailure &lt; Devise::FailureApp
  protected

  def redirect_url
    uri = URI.parse(warden_options[:attempted_path])
    if uri.path.start_with?('/admin')
      hogehoge_url # adminではじまる場合に飛ばしたいurl
    else
      super # それ以外の場合は通常のdeviseの処理へ流す
    end
  end
end
</code></pre>

<p>warden_options[:attempted_path]でアクセスしようとしたパスが参照できます</p>

<p>２. ログインエリアのurlにアクセスした時に保存するurlを操作</p>

<p>deviseはデフォルトでログインエリアにアクセスした際に未ログイン状態だとそのアクセスしたパスをsessionに保存してくれ、<br/>
ログイン後にそのurlにリダイレクトしてくれる機能があります。</p>

<p>特定のurlを覚えさせたくなかったのでパッチをあてました。</p>

<pre><code class="ruby"># config/initializers/devise.rb
module StoreLocationPatch
  def store_location_for(resource_or_scope, location)
    return if URI.parse(location).path == '/' # rootへのアクセスは記憶させない
    super
  end
end

module Devise
  module Controllers
    module StoreLocation
      prepend StoreLocationPatch
    end
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Grapeでskip_before_action]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/04/24/grape-skip-filter/"/>
        <updated>2018-04-24T14:10:09+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/04/24/grape-skip-filter</id>
        <content type="html"><![CDATA[<p>Deviseとか使っていて、ApplicationControllerに認証の仕組みを設ける時。</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  before_action :authenticate_user!
end
</code></pre>

<p>こう書きますね。<br/>
ログイン前のページではログイン判定は不要なのでskip_before_actionでskipさせるのが定石だと思います</p>

<pre><code class="ruby">class HogeController &lt;  ActionController::Base
  skip_before_action :authenticate_user!
end
</code></pre>

<p>Grapeではどうやんのよっていう話し。</p>

<!-- more -->


<p></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>route.settingsを使うといいです</p>

<pre><code class="ruby">module API::V1
  class Root &lt; Grape::API
    before do
      user_authenticate! unless route.settings[:skip_user_authenticate]
    end

    mount Users
  end
end
</code></pre>

<pre><code class="ruby">module API::V1
  class Users &lt; Grape::API
    resource 'users' do
      route_setting :skip_user_authenticate, true
      get do
        # do something
      end
    end
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Heroku小ネタ]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/04/03/rack-attack/"/>
        <updated>2018-04-03T11:43:22+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/04/03/rack-attack</id>
        <content type="html"><![CDATA[<p>HerokuでRailsアプリ動かすときは<br/>
<a href="https://github.com/kickstarter/rack-attack">rack-attack</a><br/>
入れといたほうが良さそう。</p>

<p><a href="https://help.heroku.com/HCCDCDYY/does-heroku-offer-ddos-denial-of-service-mitigation">https://help.heroku.com/HCCDCDYY/does-heroku-offer-ddos-denial-of-service-mitigation</a></p>

<!-- more -->


<p></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>ちなみにthrottleの機能を使ってみたんですが、cacheを使って試行回数を判定するのでcache storeをnull_storeとかにしちゃうといつまでもローカルではテストできません。</p>

<p>最近釣りに行き始めてますが連続坊主中。</p>
]]></content>
    </entry>
    
</feed>
