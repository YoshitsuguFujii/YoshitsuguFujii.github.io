<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby on rails | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2024-11-30T17:51:03+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[冬なのに怖い話]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2024/11/29/kowaihanashi/"/>
        <updated>2024-11-29T19:44:33+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2024/11/29/kowaihanashi</id>
        <content type="html"><![CDATA[<p>いや～ねぇ、あるシステムの開発をベンダーに頼んだんですよ。</p>

<p>発注先のベンダーも委託しているディレクターに聞いて紹介してもらってね。<br/>
紹介なら間違いないだろうって期待してたんです。</p>

<p>……ところが。</p>

<p>納品されたコードを開いた瞬間ですよ。</p>

<p>いやね、なんか嫌な気配がするんですよ。画面越しにね、冷たい風が吹いたような……そう、あの……山奥の廃屋に踏み込んだ時みたいな、不気味な空気を感じるんです。何かが違うっていう感じ。最初はね、『まぁ、ちょっとクセがあるだけかな』って思ったんですよ。でもね、どんどん読み進めるうちに……だんだんとゾッとしてきましたよ。</p>

<p>でもね、最初はまだ楽観的だったんですよ。『まぁ、ちょっとクセのある書き方なんだろう』ってね。気にせず読み進めたんですけど……段々とね……だんだんとですよ……。</p>

<p>……やだなぁ、やだなぁ……</p>

<p>読み進めるうちに……あぁ、これは……って思ったんですよ。</p>

<p>その時、心の中で、はっきり聞こえました。</p>

<p>『これ、クソコードだ』って。</p>

<!-- more -->  


<p>テストが書かれていなかったり、テストが書かれていても中身がなかったり、<br/>
enumで宣言しているのにenumを使わずに、なぜかIDで判定していたり、<br/>
viewで呼ばれている参照メソッドで特定IDの時だけ更新が走ったり(しかも結構重要な更新)、</p>

<pre><code class="ruby">def profile_info(user, role, profile_id = nil, group)
</code></pre>

<p>みたいなメソッドシグネチャがあったり</p>

<pre><code class="ruby">profile(user, user_role.role, profile.id)
</code></pre>

<p>それを上記みたいな呼び出し方をしていたり(ちなみにprofile.idはgroupに入ります)</p>

<p>rspecの最初でseedをぶちこんでいるんですが、それをテストの途中で書き換えたり(6000件あるテストのうちどこで変えているのか不明)</p>

<p>リファクタリングしがいのあるコードが満載です。</p>

<p>システムを受託会社にお願いする時、うまく行くかはベンダー次第で、これをベンダーガチャと自分は言っているんですが、webのベンダーガチャは名前がそれなりにある会社以外は基本的にだいたいハズレと思った方が良い気がしてきました。</p>

<p>８割、9割はハズレ。同じベンダーでも人次第ではハズレになる。</p>

<p>ちなみに申し訳ないことに自分自身がハズレになったこともあって、自分以外まともにコード書けない6人チームを組まされた時ですね。辞めましたけど。</p>

<p>結局不確実性の高いベンダーに頼むよりも、社内の人間をたてて、そこにフリーランスで集めて作ったほうがコントロールしやすいし、結果的に安くて良いものができる気がする。大変ですけどね。</p>

<p>でもそれは出来るまで大変なだけで、出来た後の地獄の方が問題だなぁと思う今日この頃。</p>

<p>ベンダーにたまにいるめちゃくちゃやばい奴も、フリーランスなら普通に仕事なくなるので体感的にあまりいない気がする。</p>

<p>経験積んだフリーランス集められれば管理も思ったより楽なはず。やるべきことを理解しているから。</p>

<p>問題はそんなフリーランスを集められるかというところ。お金積めば集められると思うんだけど、どうなんだろうか。
シニアエンジニア足りてないらしいしなぁ。</p>

<p>生成AI誕生により誰でもコードは書ける世界が来てしまったので、コードが書けるだけのジュニアエンジニアには価値がなくなってしまって、生成AIが表現できない領域で戦えるシニアエンジニアはそりゃ貴重になるよなと。</p>

<p>労力は外注できるが、能力は外注できない</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">労力は外注できるが、能力は外注できない <a href="https://t.co/0JwYob0FyQ">https://t.co/0JwYob0FyQ</a> <a href="https://t.co/4JakgPEZzt">[pic.twitter.com/4JakgPEZzt](http://pic.twitter.com/4JakgPEZzt)</a></p>— Takuto Wada (@t_wada) <a href="[https://twitter.com/t_wada/status/1859756507115684348?ref_src=twsrc^tfw](https://twitter.com/t_wada/status/1859756507115684348?ref_src=twsrc%5Etfw)">November 22, 2024</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>こう言うかっこいい言葉を使える大人になりたい。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[ i18nについて思ったこと]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2024/11/18/about-i18n/"/>
        <updated>2024-11-18T20:20:18+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2024/11/18/about-i18n</id>
        <content type="html"><![CDATA[<p>ランニング用のLサイズのパンツを楽天で買ったんです。<br/>
届いて気がつきました。<br/>
レディースを買っていたことに。</p>

<p>しょうがないのでお尻をプリプリさせながら、朝から40過ぎのおっさんが街中を走っていたんですが、ついに先日少し破れまして、躊躇なく捨てることができました！</p>

<p>めちゃくちゃ嬉しかった！</p>

<p>嬉しくて近所のまいばすけっとでシャンパン買ってきて夜は乾杯しました。</p>

<p>さて本題。</p>

<p>ある現場でi18nは直感的に見えづらい、国際化対応はまずやらないし、不必要なi18nの使用はアンチパターンだ。ということでi18nをつかった変換が文字列リテラルに書き換えられてました。</p>

<p>そういえばi18nを使うことについて言語化していなかったなと思ったので、言語化ついでに記事にしてみました。</p>

<!-- more -->  


<h2>文字列リテラルをそのまま使うこと</h2>

<p>文字列リテラルってたしかに直感的で便利なんですが、ただの文字列でしかないんですよね。値それ以上の意味はない。</p>

<p>文字の内容がたしかに雄弁に語っているように見える、見えるんですがその文字が意味するものはコンテキストによるうっすらとした結合でしかないんです。<br/>
ほぼ何にも紐づいていない。</p>

<p>例えばUserコントローラーのshowアクションに書かれていた文字列リテラル(ユーザー等)の場合はUserリソース関連の処理だなとはわかる。<br/>
が、これは人間の認知力に完全に頼った理解であり、プログラム的には何も表現されていないし、実際に何も紐づいていないんです。</p>

<p>ユーザーとメンバーとカスタマーという概念があり、所属グループ、所属企業、サークルがある。<br/>
別々のコンテキストでユーザーという文字を埋め込むと、それはどれを表現しているといえますか？</p>

<p>そのユーザーはControllerではメンバーを表しているかも知れないし、viewでは所属と紐づける中間テーブルを表しているかもしれません。<br/>
しかし文字列リテラルはコード的には何も色付けされていないわけですから、そのユーザーという文字列がどの業務(ドメイン)領域のユーザーを表しているか？ということについては何も語ってくれないわけです。</p>

<p>これは文字列リテラルをなぜわざわざ定数として定義するのかの解にもなります。</p>

<p>定数として定義することにより、この文字列リテラルは特殊であり、そのクラスの所属であり、スコープはクラスに閉じるよ。<br/>
このクラスのコンテキストで利用するよということがわかるんです。</p>

<p>定数としてこのクラスの特別な文字列として宣言する(クラスの色を付けてあげる)。<br/>
そうすると影響が読みやすく、わかりやすくて変更が楽で安全なコードになるわけです。<br/>
定数として宣言することで文字列以上の働きと意味をもたせることができるようになります。</p>

<p>クラスの色をつけるといういう意味であれば、型付け言語であればメソッドを持たない型でありながら単純な文字列を格納するstatusというフィールドにstatusという型を明示的に定義する感覚に近いと思っています。</p>

<pre><code>type status string
</code></pre>

<p>番外編としてはIDEの恩恵設けれますね。  </p>

<h3>i18nの国際化対応以外の効用 </h3>

<p>で最初に戻るんですが、i18nは国際化対応としての機能だけだと認識されがちです。<br/>
それ以外のメリットってないんでしょうか？</p>

<p>ヒントは先程の定数化（文字列の所属化、特定クラスの色をつける）と、デコレータにあります。<br/>
modelに紐づけたlocaleの定義って、railsが規約にのっとって自動的にモデルと紐づけてくれるんです。<br/>
その定義はモデルの所属になりますしスコープもそのモデルに限定されます。<br/>
そして対応する言葉を返すrailsの仕組みを介したデコレータにもなります。 </p>

<pre><code class="yaml"># config/locales/ja.yml
ja:
  activerecord:
    models:
      user: ユーザー
    attributes:
      user:
        name: 名前
        email: メールアドレス
        created_at: 作成日
        updated_at: 更新日
</code></pre>

<pre><code class="ruby">User.model_name.human # =&gt; "ユーザー"
User.human_attribute_name(:name) # =&gt; "名前"
</code></pre>

<p>さきほどのユーザーとメンバーとカスタマーの例に戻りましょう。<br/>
かなり強引ですが、以下のように設定したとしましょう。</p>

<pre><code class="yaml">ja:
  activerecord:
    models:
      user: ユーザー
      member: ユーザー
      customer: ユーザー
</code></pre>

<pre><code class="ruby">User.model_name.human # =&gt; "ユーザー"
Member.model_name.human # =&gt; "ユーザー"
Customer.model_name.human # =&gt; "ユーザー"
</code></pre>

<p>同じユーザーという文字列ですが、それぞれのユーザーという文字列がどのモデルを指しているかわからないという人はいないでしょう。</p>

<p>文字列を所属化することでプログラム的に判断できるようになっています。<br/>
その処理の前後、あるいは書かれた場所を考慮してあやふやな人間の認知力によって判断する必要はありません。</p>

<p>人の認知力に頼らずプログラム的にユーザーという文字列にモデルクラスをあてることにより文字列の所属を明らかにしています。</p>

<p>これがただの文字列で埋め込まれていた場合。例えばCustomerの文脈で使われている「ユーザー」という文字列を「購入者」としたいという仕様変更が入った場合。 人間の認知力にたよって前後の処理、書かれた場所のユーザーという文字列からCustomerの文脈で使われている箇所を徹底的に探し出し、修正しなければいけません。</p>

<p>影響が閉じていないため、修正範囲の特定が困難になり、変更容易性が損なわれています。 </p>

<p>DDDなどでは業務の言葉とプログラムで使う言葉を対応させるという書き方をします。<br/>
そうするとプログラムは業務を自然に素直に表現でき、ロジックが書いてある場所に違和感はなくなって適切な場所に配置され、
影響が明確になり、修正箇所も業務の内容がそのまま反映されているため容易に特定できます。</p>

<p>プログラムは英語で書かれます、しかし我々は普段日本語を使う環境にいます。<br/>
日本語を使う我々においてi18nの設定は、間に入ってプログラムの用語(モデルの要素)と日本語の用語をrailsの仕組みを介して1対1で対応させます。 つまり業務の言葉とプログラムで使う言葉を透過的に一致させてくれます。</p>

<p>また単純にモデルの属性に対となる一意な名称を与えるということは、表記揺れを防止するという恩恵もあります。</p>

<h2>まとめ</h2>

<p>いかがでしたでしょうか？<br/>
プログラムと紐づけて考えるのは静的型付け言語のアプローチなので、動的型付け言語ではあまり考えたりしないかもしれません。<br/>
I18nの設定はひと手間かかるし、何が書かれているか設定を見直さないといけないため面倒くさく感じてしまうかもしれません。<br/>
しかしその裏ではその手間以上の意義があると感じています。</p>

<p>もちろん完全にプロジェクト内のコードを1文字残らず把握していて問題ない。把握できないサイズにスケールしない。 チームではないというのであれば問題ないと思います。</p>

<p>モデルであればi18nを使うことに関しては以下のようなことを考えています</p>

<ul>
<li>国際化対応としての機能</li>
<li>表記揺れ防止の機能</li>
<li>所属化(定数化)させる機能</li>
<li>デコレータとしての機能</li>
</ul>


<p>view専用のlocaleだとちょっと意味が弱くなりますが使う価値はあると思います</p>

<ul>
<li>国際化対応としての機能</li>
<li>表記揺れ防止の機能</li>
<li>文字列が必ずその文字をさす(ポインタ的な)</li>
</ul>


<p>例えば文字列リテラルで埋め込むと、PRレビュー時にここは「保存」というボタン名なのに、ここは「保存する」になっているとか余計なことを気にしなくてよくなります。<br/>
人間が一度にできることは限りがあるので、気にしなくていいことが少ないにこしたことはありません。<br/>
規則的かつ統一的に表記揺れのない文字列を埋め込めます。</p>

<h2>番外編</h2>

<p>そういえば10年以上前に文字列で直接埋め込んでいたら、i18n使って下さいと言われてi18nに全部直したことがあります。</p>

<p>そして直した後、ログインユーザーのロールによって読み出すyamlを変えるという仕様が発生しました。
そこでi18nのメソッドをフックして読み出すルートを変える処理を書いたことがあります。</p>

<p>viewは共通だけど、ロールによって見せる文言を変えたいというやつです。<br/>
当時のコードもyamlも手元にないので具体的に話せないんですが、<br/>
こんな感じにyamlを設定したら先生と生徒で文字を読みかえてくれるような処理です。</p>

<pre><code class="yaml">ja:
  teacher:
    homework: 課題
  student:
    homework: 宿題
</code></pre>

<p>かなりニッチなケースなのでメリットとしてあげれないんですが、ちょっと面白かったのでご紹介でした。</p>

<p>既存の処理をフックして処理を追加して元の処理に戻したりと柔軟に対応できるのはrubyのいいところですね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Valueオブジェクトパターン]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2024/11/03/value-object-pattern/"/>
        <updated>2024-11-03T14:29:30+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2024/11/03/value-object-pattern</id>
        <content type="html"><![CDATA[<p>メリークリスマス！（はやい）。</p>

<p>家族と牛丼屋さんで、</p>

<p>昔は並だと物足りなかったのに、最近は持て余すよなぁ！</p>

<p>と笑顔で言ったら、</p>

<p>おじいちゃんになったんじゃない？</p>

<p>と言われて静かにショックをうけて黙ってしまったシニアなフリーランスエンジニアの藤井です。</p>

<p>この記事は、<a href="https://qiita.com/advent-calendar/2024/ruby-on-rails">Ruby on Rails Advent Calendar 2024 Advent Calendar 2024</a> の1日目です。</p>

<p>すいません。偉そうな名前をつけていますが、ActiveRecordで値オブジェクトを使うことで、より見やすくわかりやすく、責務を適切に閉じ込めて疎結合にし、コードをシンプルにするにあたって有意義だったと感じた実装方法です。</p>

<p>もしすでに既出だったりしたらそっと教えて下さい。</p>

<!-- more -->  


<p>Railsの一般的なコードを見ると、どこでもhashを持ち回して、キーアクセスで欲しいデータにアクセスして取り出すという実装が多い気がしていて、hashの空中戦みたいな、ある時点でその中身がどうなっているのかコード上でわからないのがだいぶ辛いと感じる時があります(処理を全部追うか、デバッグでとめて中身を見るか)</p>

<p>それを顕著に感じるのはテーブルにjson型を使っているときです。</p>

<p>中身はそのままhashだったりするのですが、中身ぱぱっと想像できます？<br/>
DBの値を見てもイマイチなんてこと多いんじゃないでしょうか。</p>

<p>そんなjson型のカラムに適用すると真価を発揮するパターンなんですが、今回はよりシンプルな数量というものに適用してみたいと思います(json型はまた別の機会に)</p>

<p>そもそもなんでこの実装にしようと思ったかというと、Goとかで実装すると構造体に構造体を埋めて生成するのが当たり前ですよね？</p>

<pre><code class="go">// 住所の値オブジェクト
type Address struct {
    Street string
    City   string
    Zip    string
}

// Person構造体
type Person struct {
    Name    string
    Age     int
    Address Address // Address構造体を埋め込む
}
</code></pre>

<p>Person型に住所型の責務と実装がにじみでることはないし、Personが住所にZipが必須かチェックするということも発生しません。ロジックが綺麗にカプセル化されていて、とても整理されていると感じます。住所の持ち方を変えたとしてもその影響がPersonに影響を与えることもありません。</p>

<p>これRailsでも使えない？と思ったのがはじまりです。</p>

<p>では実際に見ていきましょう。</p>

<p>サンプルコードは以下のバージョンで動かしています。</p>

<p>Ruby 3.3.5<br/>
Rails 7.2.2</p>

<p>また見やすくするために<a href="https://github.com/bootstrap-ruby/bootstrap_form">bootstrap_form</a>を使っています。</p>

<p>購入モデルを作成します。購入モデルはユーザー名と数量を持ちます。</p>

<p>数量はマイナス値でないこと、最大値は99というルールを持ちます。</p>

<p>まずは値オブジェクトとして数量を定義します。</p>

<p>DDDの世界で開発している人から見ると、数量はただの数値ではありません。数値は数値で数量は数量です。という言葉が聞こえてきそうです。<br/>
数量がマイナス値でないこと、99を超える数値でないことを数量自身が管理できると良さそうです。</p>

<pre><code class="ruby">module Values
  class Quantity
    include ActiveModel::Model

    attr_reader :number

    validates :number, presence: true
    validates :number, numericality: {
      only_integer: true,
      greater_than: 0,
      less_than_or_equal_to: 99
    }

    validate :hogehoge

    def initialize(number)
      @number = number
    end

    def to_i
      @number.to_i
    end

    def hogehoge
      # カスタムバリデーションも使えるぜというだけのメソッド
    end
  end
end
</code></pre>

<p>値オブジェクトの中に数量に関するロジックが閉じ込められています。</p>

<p>次にmodelで値オブジェクトをつかえるようにするためのserializerの定義です。</p>

<pre><code class="ruby">module Serializers
  class QuantitySerializer
    # Rubyオブジェクトを変換
    def self.dump(quantity)
      if quantity.is_a?(Hash)
        Values::Quantity.new(quantity[:number])
      else
        quantity
      end.to_i
    end

    # Rubyオブジェクトに変換
    def self.load(quantity)
      Values::Quantity.new(quantity)
    end
  end
end
</code></pre>

<p>データベースから取り出した時に値オブジェクトに変換し、データベースに保存する時に数値に戻しています。</p>

<p>最後にmodelです</p>

<pre><code class="ruby">class Purchase &lt; ApplicationRecord
  serialize :quantity, coder: Serializers::QuantitySerializer

  validate :validate_quantity

  def validate_quantity
    return if self.quantity.valid?

    errors.add(:base, "数量にエラーがあります")
  end
end
</code></pre>

<p>さすがに透過的に値オブジェクトのvalidationは実行してくれないので、マニュアルで実行する必要があります。</p>

<p>上記だけで数量という値オブジェクトをPurchaseモデルに埋め込むことができます。</p>

<p>見て分かる通り、数量のロジックがPurchaseモデルに現れることはありません。責務で綺麗に分割され、ロジックがカプセル化されているのがわかると思います。
そしてserializeの行を消せば数量ロジックが完全にデタッチできます。違う数量の値オブジェクトを作って差し替えることも可能です。データとロジックが分離しており完全に疎結合です。</p>

<p>そして他のモデルで数量を使いたい場合には、Purchaseモデルの中身をそっくりapp/models/concerns配下のmoduleに入れてそれを使いたいモデルでimportするようにすれば、他のモデルでも簡単に使い回しが可能です。</p>

<p>さらにその場合、数量ロジックが変わったとしても各モデルに手をいれるのではなくて、数量クラスのロジックに手をいれるだけで自動的に全クラスに適用されます(影響範囲が閉じられている)</p>

<p>では実際に動かしてみましょう。</p>

<p>コントローラーとviewのformのコードものせます。</p>

<p>コントローラー(新規作成だけ)</p>

<pre><code class="ruby">class PurchasesController &lt; ApplicationController
  def new
    @purchase = Purchase.new
  end

  def create
    @purchase = Purchase.new(purchase_params)

    if @purchase.save
      redirect_to @purchase, notice: "Purchase was successfully created."
    else
      render :new, status: :unprocessable_entity 
    end
  end

  private

  def purchase_params
    params.require(:purchase).permit(:username, quantity: :number)
  end
end
</code></pre>

<p>form</p>

<pre><code class="ruby">&lt;%= bootstrap_form_for purchase do |f| %&gt;
  &lt;% if purchase.errors.any? %&gt;
    &lt;div class="alert alert-danger"&gt;
      &lt;h4&gt;&lt;%= pluralize(purchase.errors.count, "error") %&gt; prohibited this purchase from being saved:&lt;/h4&gt;
      &lt;ul&gt;
        &lt;% purchase.errors.full_messages.each do |message| %&gt;
          &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
        &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="row"&gt;
    &lt;div class="ms-3 mb-3 col-4"&gt;
      &lt;%= f.text_field :username, label: "Username", class: "form-control" %&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="row"&gt;
    &lt;div class="ms-3 mb-3 col-4"&gt;
      &lt;%= f.fields_for :quantity, f.object.quantity do |fq| %&gt;
        &lt;%= fq.number_field :number, label: "Quantity", class: "form-control" %&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="mt-3"&gt;
    &lt;%= f.submit class: "btn btn-primary" %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>fields_forを使わずに書くと実はもうちょっとserializerとかパラメータの取り回しとかをシンプルに書けたりするんですが、こう書くとエラーオブジェクトを透過的に伝播させられるため使っています。</p>

<p>実際にvalidationエラーをおこした画面がこちらです。</p>

<p><img src="http://yoshitsugufujii.github.io/images/blog/20241103/error.png"></p>

<p>値オブジェクトのエラーも特別な記述なくしっかりとformでレンダリングされています。</p>

<p>validationエラーを起こさないで保存に成功した場合は、DBに数値のみが入っているはずです。</p>

<p>いかがでしたでしょうか？</p>

<p>ActiveRecordのモデルに値オブジェクトを適用することで、ロジックが読みやすく、わかりやすくなり、ロジックはカプセル化されて影響範囲が限定され、責務は明確になり、疎結合になることにより、よりオブジェクト指向に近づけられたのではないでしょうか？</p>

<p>Valueオブジェクトパターンの紹介でした。</p>

<p>次回書く気力があればこの回の焼き回しになりそうですが、json編をお届けしようと思います。</p>

<p>今回作成したコードは<a href="https://github.com/YoshitsuguFujii/value_pattern">こちら</a>にあります</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxで半角英数字のみの入力を受け付けたい]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2022/11/11/axlsx-custom-validation/"/>
        <updated>2022-11-11T16:00:07+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2022/11/11/axlsx-custom-validation</id>
        <content type="html"><![CDATA[<p>お仕事いただいていたサービスが立て続けにcloseとなってしまいピンチの藤井です。<br/>
お仕事ください！</p>

<p>暇なので<a href="https://qiita.com/YoshitsuguFujii/items/e35ef63f3c9162babb14">Qiita</a>に記事かいたら全然いいねもらえません。<br/>
いいねください！</p>

<!-- more -->  




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>Axlsxでセルに入力規則で半角英数字のみで何文字以上、何文字以内を設定したので記載</p>

<pre><code class="ruby">p = Axlsx::Package.new
p.workbook.add_worksheet do |ws|

  ws.add_data_validation("A1:A1", {
    :type =&gt; :custom,
    :formula1 =&gt; 'AND(COUNT(INDEX(FIND(MID(UPPER(A1)&amp;amp;REPT("*",64),ROW($1:$64),1),"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"),))=LEN(A1),LENB(A1)&amp;gt;9,LENB(A1)&amp;lt;65)',
    :showDropDown =&gt; false,
    :showErrorMessage =&gt; true,
    :errorTitle =&gt; '入力エラー',
    :error =&gt; '半角英数字10文字以上、64文字以内で入力してください',
    :errorStyle =&gt; :stop,
    :showInputMessage =&gt; true,
    :prompt =&gt; '半角英数字10文字以上、64文字以内'})

end

p.serialize 'data_validation.xlsx'
</code></pre>

<p><img src="http://yoshitsugufujii.github.io/images/blog/20221111/image.png"></p>

<p>現場からは以上です。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[grapeでrender_to_string]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2021/11/16/render-jbuilder-text-in-grape/"/>
        <updated>2021-11-16T14:08:41+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2021/11/16/render-jbuilder-text-in-grape</id>
        <content type="html"><![CDATA[<p>すっかり存在を忘れていたような、あえて忘れていたような。<br/>
お久しぶりです。藤井です。</p>

<p>最近は横須賀のボートばっかり行ってます。カヤックもはじめました。<br/>
プロフィッシュ45にのっています。<br/>
舘山で３回浮かびました。<br/>
出艇ポイントを知らないのでこれから勉強します。</p>

<p>メモを整理していたら走り書きのようなコードがいくつかあって有意義そうなのをのせようかと</p>

<!-- more -->  




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7039502723411845"
     data-ad-slot="8206045005"></ins></p>

<script>  
     (adsbygoogle = window.adsbygoogle || []).push({});  
</script>


<p></p>

<pre><code class="ruby  ">def render_jbuilder(file_path)  
  root_path =  Rails.root.join 'app', 'views', 'api'  
  engine = ::Tilt.new(root_path / file_path, nil, view_path: root_path)  
  JSON.parse(engine.render(self))  
end  
</code></pre>

<p>root_path取得のところは</p>

<pre><code class="">env['api.tilt.root'] = Rails.root.join 'app', 'views', 'api'  
</code></pre>

<p>の設定をconfig/application.rbとかでやっているのであれば</p>

<pre><code class="">root_path = env['api.tilt.root']  
</code></pre>

<p>でも取れます。</p>

<p>現場からは以上です。</p>
]]></content>
    </entry>
    
</feed>
