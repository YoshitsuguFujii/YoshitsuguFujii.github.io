<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby on rails | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2015-03-13T00:14:18+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[cacheのキーを削除]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/01/08/20150108182843/"/>
        <updated>2015-01-08T18:28:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/01/08/20150108182843</id>
        <content type="html"><![CDATA[<p>例えばmodelへの問い合わせ結果をキャッシュに保存していて、after  _saveなどで消したい場合などは<br/>
Rails.cache.delete(&lsquo;キー名&rsquo;)でできる。</p>

<pre><code class="ruby">    users = Rails.cache.fetch("users", expires_in: 30.seconds) do
      User.all.to_a
    end

    # 消す
    Rails.cache.delete('users')
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[関連を保存時に削除する]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2014/12/26/20141226142144/"/>
        <updated>2014-12-26T14:21:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2014/12/26/20141226142144</id>
        <content type="html"><![CDATA[<p>saveした時に削除したいときは対象のレコードに対して</p>

<pre><code class="ruby">accepts_nested_attributes_for :対象のアソシエーション, allow_destroy: true
</code></pre>

<p>で宣言してから、</p>

<pre><code class="ruby">parent.childs.first.mark_for_destruction # 削除したいレコードに削除のマークをつける
parent.childs.save # =&gt; childsのfirstのものか削除される。
</code></pre>

<p>で削除される。<br/>
ちなみにsave時にこれを削除してねってマークしたかは</p>

<pre><code class="ruby">parent.childs.first.marked_for_destruction? # =&gt; true
</code></pre>

<p>で確認できる。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[csvからuserを検索して、データ更新サンプル]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2014/02/03/20140203145732/"/>
        <updated>2014-02-03T14:57:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2014/02/03/20140203145732</id>
        <content type="html"><![CDATA[<p>例えば外部システムとユーザの情報を持ち合っている時。<br/>
外部システムのuser  <em>id(コード内ではuser  </em>external  _id)から、システム内のユーザIDを導き出して、そのデータにパッチを当てるスクリプト。</p>

<p>active  _recordとかは単品で扱ってる(database.yml&#8217;読み込み)</p>

<pre><code class="ruby">#!/usr/bin/env ruby
# coding: utf-8
require 'csv'
require 'optparse'
require "active_record"

params = ARGV.getopts('', 'csv:user.csv', 'ENV:development', 'RAILS_ROOT:./')
p params

config = YAML.load_file( params['RAILS_ROOT'] + 'config/database.yml' )
raise ArgumentError, 'ENVが設定されていません'            if params['ENV'].nil?
raise ArgumentError, 'RAILS_ROOTが指定されていません'     if params['RAILS_ROOT'].nil?
raise ArgumentError, 'database.ymlを読み出せませんでした' if config[params['ENV']].nil?
raise ArgumentError, 'csvファイルが存在しません'          unless File.exists?(params['csv'])

ActiveRecord::Base.establish_connection(config[params['ENV']])
class User &lt; ActiveRecord::Base
end

column = %w(user_external_id  name birthday)
CSV.foreach(params['csv']) do |row|
  # 一行を全部hashに入れる
  row_hash = {}
  row.each_with_index do |r,idx|
    row_hash[column[idx]] = r
  end

  user = User.find_by_external_id(row_hash['user_external_id'])
  if !user.nil?
    user.update_attribute(:name =&gt; row_hash['name'])
  end
end
</code></pre>

<p>実行はターミナルで</p>

<pre><code class="ruby">ruby 上記コードのファイル --ENV production
もしくは
bundle exec ruby 上記コードのファイル --ENV production
</code></pre>

<p>とかとか</p>

<p>スクリプトのオプションは<br/>
 &ndash;ENVはdatabae.ymlの読み込みたい環境{development|production}<br/>
 &ndash;csv で読み込むファイルパス<br/>
 &ndash;RAILS  _ROOT でRailsのapp rootを指定。</p>

<p>さらさらっと書いて本番のrails
rootで動かしてパッチを実際に当てましたが。<br/>
仕事にかかわる記述は消したり直したり、ロクにテストしていないので動かなかったらごめんなさい。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[fields_forに渡すrelationを絞る]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2013/11/19/20131119145036/"/>
        <updated>2013-11-19T14:50:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2013/11/19/20131119145036</id>
        <content type="html"><![CDATA[<p>contentモデルの下にcontent  <em>detailモデルがあって、
accepts  </em>nested  <em>attributes  </em>forしていて、fields  _forを使う場合。</p>

<pre><code class="ruby">f.fields_for :content_details do |c|
</code></pre>

<p>って書くと、contentに紐付く全部のcontent  _detailsがformとして表示されちゃう。</p>

<p>第二引数にインスタンスを渡せばいいみたい。</p>

<pre><code class="ruby">f.fields_for :content_details, @content.content_details.where(state = 1) do |c|
</code></pre>

<p>ちなみに第二引数はnilがデフォルト引数なので</p>

<pre><code class="ruby">f.fields_for :content_details
f.fields_for :content_details, nil
</code></pre>

<p>は同じ意味になるので、インスタンス変数は値を入れなければnilなので</p>

<pre><code class="ruby">fields_for :content_details, @details
</code></pre>

<p>ってやって、editの時だけ@detailsに値を入れるとうまく変更したいレコードのみ抽出できて、処理を切り分けられる気がします。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[arel_table使いながら、たくさんの条件を配列にいれつつ検索]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2013/10/29/20131029210140/"/>
        <updated>2013-10-29T21:01:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2013/10/29/20131029210140</id>
        <content type="html"><![CDATA[<p>何を言っているんでしょう。<br/>
コード見たほうが早いですかね</p>

<pre><code class="ruby"># andで条件組み立て
def condition
  cons = []
  cons &lt;&lt; User.arel_table[:name].matches("%hoge%") 
  cons &lt;&lt; User.arel_table[:nick_name].matches("%fuga%")
  cons.inject(&amp;:and)
end

user.where(condition)
</code></pre>

<p>配列の結合で一瞬悩んだのでメモ。<br/>
andをorにすると、どれかに一致するという条件になります。</p>
]]></content>
    </entry>
    
</feed>
