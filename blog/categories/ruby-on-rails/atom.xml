<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby on rails | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2017-09-07T15:04:34+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[S3からRailsを介して大きなファイルをストリーミングダウンロードさせる]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2017/06/29/large-s3-file-relay/"/>
        <updated>2017-06-29T15:25:15+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2017/06/29/large-s3-file-relay</id>
        <content type="html"><![CDATA[<h3>近況とか</h3>

<p>最近の藤井は月〜木は新橋の方面で働き金曜日は在宅で仕事させてもらっています。<br/>
言語は相変わらずRubyでFWはRubyOnRailsですね。<br/>
Firebase触ったり、WebRTCに触ったり、はじめてガチでHeroku使ったりしています。</p>

<p>自分が業界に入りたての頃はこういったサービスがなかったので1からどう作るかって感じでしたが、<br/>
最近はどうやってサービスを組み合わせて作るかって感じに変化したように思います。<br/>
サービスの学習コストの方が高めですかね。</p>

<p>Macbook Airの日本語キーボードから英字配列のhhkbに移行しました。<br/>
:が打ちにくくて最初文句ブーブーでしたが、慣れるとたしかに英字配列の方がやりやすい気がします。<br/>
職場と自宅で持ち運びがめんどくさかったので二台買いました。<br/>
hhkbの墨とtype-sです。<br/>
お金使いすぎで鼻血出そうです。</p>

<p>帰宅ランは続けていて調子いいときは10キロぐらい走ります。<br/>
だいたい7、8キロぐらいを目安に走っています。<br/>
江戸川沿い走るの最高に気持ちいいです。</p>

<!-- more -->


<p></p>

<h3>表題の件</h3>

<p>S3のファイルをRailsを中継してクライアントにストリーミングダウンロードする処理書きました。<br/>
Httparty使ってます。Httpartyでstreaming download楽ですねー。</p>

<pre><code class="ruby">class AttachmentController &lt; ApplicationController
  include ActionController::Live

  def download
    attachment = Attachment.find(params[:id])
    begin
      self.response.headers["Content-Type"] = attachment.content_type
      self.response.headers["Content-Length"] = attachment.file_size
      self.response.headers["Content-Disposition"] = "attachment; filename=#{attachment.file_before_type_cast}"
      self.response.headers["Content-Transfer-Encoding"] = "binary"
      self.response.headers["Last-Modified"] = attachment.updated_at.ctime.to_s
      HTTParty.get(attachment.url, stream_body: true) do |fragment|
        self.response.stream.write fragment
      end
    rescue ActionController::Live::ClientDisconnected  # キャンセルされた場合
      # nop
    ensure
      response.stream.close
    end
  end
end
</code></pre>

<p>Puma使いましょう。webrickとかthinは対応していません。</p>

<p>config/environments/development.rbに以下の設定を追加。</p>

<pre><code class="ruby">config.cache_classes = true
config.eager_load = true
</code></pre>

<p>あとは<code>bundle exec rails s Puma</code>して試してみてください。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[model.changesで強制的に変更したことにする方法]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/04/11/rails-dirty-mark-changed/"/>
        <updated>2016-04-11T18:26:43+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/04/11/rails-dirty-mark-changed</id>
        <content type="html"><![CDATA[<p>RailsのActiveModelのDirtyでは変更前、変更後、変更したかなどモデルクラスの新旧状態が取れる。<br/>
<a href="http://qiita.com/kakkunpakkun/items/b286f789ca8590104ad1">http://qiita.com/kakkunpakkun/items/b286f789ca8590104ad1</a></p>

<p>このdirtyを使って変更してないけど変更したことにしたい(observerを再実行したい時とか)に使える技</p>

<pre><code class="ruby">user = User.first
user.changes # =&gt; {}
user.created_at_will_change! # =&gt; =&gt; 2015-01-16 20:09:59 +0900
user.changes 
# =&gt; {
#  "created_at" =&gt; [
#    [0] 2015-01-16 20:09:59 +0900,
#    [1] 2015-01-16 20:09:59 +0900
#   ]
# }
</code></pre>

<p>属性名_will_change!で新旧に同じ値が設定される。</p>

<p>なんでこんなことやりたかったかっていうとobserverでuserのnameの値が変更されたらapiを叩く処理を書いていたのだけど、急遽全件apiを再実行する必要があり強制的にnameが変更されたことにしたかったため調べたらあったというお話</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[[小ネタ]Railsを使っていてAngularのform validationだけしたい時]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/03/23/angular-with-rails-name-convention/"/>
        <updated>2016-03-23T12:36:53+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/03/23/angular-with-rails-name-convention</id>
        <content type="html"><![CDATA[<p>railsでシステムを作っていて、ここはゴリゴリ書くようなところじゃないけどformのvalidationだけangularの機能使いたくなったんですが。
railsはname属性に[]を使うので、この場合のng-show内部の指定がわからなかったので備忘録も兼ねて。</p>

<pre><code class="erb">form name="new_form"
  input name="price[hoge]" ng-model="price" ng-pattern="/^([1-9]\\d*|0)(\\.\\d+)?$/" required="" type="text" /
  span.text-error ng-show="newForm['price[hoge]'].$error.required"  ※
  span.text-error ng-show="newForm['price[hoge]'].$error.pattern"  This is not a valid dollar.
</code></pre>

<p>formのnameに指定されいるものを[]とシングルクォートで囲むといけます。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Rails 便利なテクニック その１]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/02/18/rails-tips-1/"/>
        <updated>2016-02-18T11:33:58+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/02/18/rails-tips-1</id>
        <content type="html"><![CDATA[<p>日常コード書いてて便利だなぁと思った技とかを思い出したら不定期に書いていきます。</p>

<p>よくメニューをulとliを使ってタブで表示することがあると思います。<br/>
例えばタブは以下の条件で表示されます</p>

<ul>
<li>ユーザの年齢が20歳以上なら表示するタブA</li>
<li>ユーザの性別が男性なら表示するタブB</li>
<li>ユーザの性別が女性なら表示するタブC</li>
<li>ユーザの性別が男性でかつ20歳以上なら表示するタブD</li>
</ul>


<p>実装が終わって総合テストがはじまります。</p>

<p>ここでチケットがあがってきます。</p>

<p><strong>『タブが一つしか出力されない場合はタブを非表示にしてください。』</strong></p>

<p>さてどうしましょう？</p>

<!-- more -->


<p>複雑なif文を組み合わせてタブが１つかでない条件を見つけ出して非表示にしますか？<br/>
タブが増えたり条件が増えたりしたら大変な上に可読性悪そうですね。</p>

<p>Railsには便利なcaptureというメソッドがあります。<br/>
これはcaptureメソッドに与えられたブロックの出力内容を返すメソッドです。<br/>
これを使うとシンプルに問題を解決できます。</p>

<pre><code class="erb app/views/layout/tab.html.erb">&lt;% tab = capture do %&gt;
  &lt;ul&gt;
    &lt;% if user.age &gt;= 20 %&gt; 
      &lt;li&gt;タブA&lt;/li&gt;
    &lt;% end %&gt;

    &lt;% if user.male? %&gt; 
      &lt;li&gt;タブB&lt;/li&gt;
    &lt;% end %&gt;

    &lt;% if user.female? %&gt; 
      &lt;li&gt;タブC&lt;/li&gt;
    &lt;% end %&gt;

    &lt;% if user.male? &amp;&amp; user.age &gt;= 20 %&gt; 
      &lt;li&gt;タブD&lt;/li&gt;
    &lt;% end %&gt;
  &lt;/ul&gt;
&lt;% end %&gt;

&lt;% # tabが一個ならば表示しない %&gt;
&lt;%= tab.scan("&lt;/li&gt;").count &gt; 1 ? tab : "" %&gt;
</code></pre>

<p>htmlを動的に組み立てる際にあれこれするよりも、出力されたhtmlをもとに処理するというケースの方が圧倒的にスマートなケースがあるので積極的に使っていきたいですね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[i18nで例えば大人と子供で文言を変えたい場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context/"/>
        <updated>2015-10-28T20:41:26+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context</id>
        <content type="html"><![CDATA[<p>条件に応じて文言を変えたい場合があると思います。<br/>
例えば大人と子供で文言を変えたい場合とかですかね。<br/>
ログインユーザが大人の場合は大人料金と表示し、子供の場合は子供料金と表示するようにします。</p>

<pre><code class="erb">&lt;% if current_user.adult? %&gt;
  &lt;span&gt;大人料金&lt;/span&gt;
&lt;% else %&gt;
  &lt;span&gt;子供料金&lt;/span&gt;
&lt;% end %&gt;
</code></pre>

<p>これが一箇所ならいいですが、たくさん出現するとつらいですね。<br/>
helperにまとめたりするのでしょうか。<br/>
こういった文言だけのif文分岐がviewに大量に出現するとコード量も増え非常に見ずらく、またhelperに乱立してしまうのは避けたいですね。</p>

<p>そこで自動でi18nの読み込み先を条件に応じて読み替えたいと思います</p>

<p>ついでにjpmobile使用してviewをpcとスマフォで切り替えている場合に<br/>
lazy lookup記法時にスマフォページでsmart_phoneがついているlocaleを探してしまうのを防ぎます。</p>

<!-- more -->


<p>config/initializers/switch_translation_helper.rbを作ります。</p>

<pre><code class="ruby">module SwitchTranslationHelper
  def translate(key, options = {})
    prefix = current_user.adult? ? "adult" : "child"
    if request.smart_phone?
      if key.start_with?(".") &amp;&amp; @virtual_path.end_with?("_smart_phone")
        @virtual_path.gsub!("_smart_phone", "") # jpmobileが付与する_smart_phoneを削除
      end
    end

    if prefix.present?
      key = scope_key_by_partial(key)
      key = "#{prefix}.#{key}" # 先頭にprefixを差し込む 
    end

    super(key, options)
  end
end

(A)
module ActionView
  module Helpers
    module TranslationHelper
      prepend SwitchTranslationHelper
      alias :t :translate
    end
  end
end
</code></pre>

<p>上記の(A)でActionView::Helpers::TranslationHelperを再オープンしてprependでSwitchTranslationHelperを差し込みます。<br/>
これでメソッド呼び出しの順序がSwitchTranslationHelperのtransalteメソッドの方が先に呼ばれるようになります。<br/>
aliasは呼ばれたクロージャ的な動きで呼ばれた段階のメソッドが固定されるようなので再度SwitchTranslationHelperのメソッドを向くように設定しなおしています。</p>

<p>transalateメソッドではキーの先頭に大人ならadult、子供ならchildを挿入します。<br/>
またlazy lookup(先頭に.がついている呼びだし)時に<em>smart_phoneが含まれるview内の場合ではpcもスマフォも同一の文言を使いたいのでキーから</em>smart_phoneを削除しています。<br/>
その後superを読んで元のRailsのi18nの流れへ戻しています。<br/>
次にja.ymlを作ります。</p>

<pre><code class="yml">ja:
  # 大人の設定
  adult:
    price:
      show:
        fee: "大人料金"

  # 子供の設定
  child:
    price:
      show:
        fee: "子供料金"
</code></pre>

<p>これでpriceコントローラのshowアクションのテンプレート内で
<code>erb
&lt;%= t(".fee") %&gt;
</code>
とすると、ユーザが大人の場合は大人料金。<br/>
ユーザが子供の場合は子供料金と表示されます。</p>

<p>prefixの条件を変えることで読込先をうまく切り替えることができますね。</p>
]]></content>
    </entry>
    
</feed>
