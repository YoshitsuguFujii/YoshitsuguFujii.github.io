<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: activesupport | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/activesupport/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2018-12-25T17:37:41+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[railsで任意のタイミングで処理を開始]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2014/11/18/20141118110832/"/>
        <updated>2014-11-18T11:08:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2014/11/18/20141118110832</id>
        <content type="html"><![CDATA[<p>おかあさんといっしょを娘が見るので、毎朝のテレビチャンネルはEテレです。</p>

<p>さてrailsでapp/model/concerns以下のモジュールを勝手にapp/modelにincludeしたいと考えました。<br/>
命名規則でファイルを拾って、includeすることにします。<br/>
例えば以下のファイル名をつけた場合に</p>

<p>app/model/user.rb<br/>
app/model/user  <em>auto  </em>load  _concern.rb</p>

<p>userクラスに自動でuser  <em>auto  </em>load  _concern.rbの内容がincludeされる感じです。</p>

<p>config/initializerに置きます。</p>

<pre><code class="ruby">  %w(models).each do |elem|
    Pathname.glob(Rails.root.join("app", elem, "concerns", "*")).each do |file|
      if file.file?
        file.basename.to_s.scan(/(.*)(_auto_load_concern.rb)$/) do |class_name|
          if class_name.present?
            model = class_name[0].classify.constantize
            model.class_eval {  include file.basename(".rb").to_s.classify.constantize }
          end
        end
      end
    end
  end
</code></pre>

<p>でもこのプロジェクトにはmodelクラスを拡張するプログラムがlib下にあります。<br/>
それを読み込まない限りはmodelを参照するとエラーになるようになっています(上記class  _name[0].classify.constantizeでエラーとなる)</p>

<p>そこでlib以下のそのプログラム群を読み込んだ後に読み込むようにしたいと思います。</p>

<p>まず先ほどのコードを以下のようにActiveSupport.on  _loadで囲みます。</p>

<pre><code class="ruby">ActiveSupport.on_load(:hoge) do
  %w(models).each do |elem|
    Pathname.glob(Rails.root.join("app", elem, "concerns", "*")).each do |file|
      if file.file?
        file.basename.to_s.scan(/(.*)(_auto_load_concern.rb)$/) do |class_name|
          if class_name.present?
            model = class_name[0].classify.constantize
            model.class_eval {  include file.basename(".rb").to_s.classify.constantize }
          end
        end
      end
    end
  end
end
</code></pre>

<p>lib下のプログラム群で処理が終わった後に以下を差し込みます。</p>

<pre><code class="ruby">  ActiveSupport.run_load_hooks :hoge
</code></pre>

<p>そうするとrun  <em>load  </em>hooksが呼ばれたタイミングでhogeがついていてるActiveSupport.on  _loadのブロック処理が開始されます。</p>
]]></content>
    </entry>
    
</feed>
