<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2015-11-18T19:58:53+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[リーダブルコードを意識しながら普段気をつけていること(1)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-1/"/>
        <updated>2015-11-18T11:33:53+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-1</id>
        <content type="html"><![CDATA[<p>初のシリーズもの。不定期開催します。<br/>
普段コードを書く時にリーダブルなコードを書く時に気をつけていることです。<br/>
思いついたら書いていきます。</p>

<p>第１回目は</p>

<p><strong>コンテキストを作る</strong></p>

<!-- more -->


<p>例えばcsvアップロード機能・ダウンロード機能を作ったときに以下のようなメソッドがあるとします。</p>

<pre><code class="ruby">class Hoge
  def download
    header
  end

  def upload
  end

  private
  def header
  end
end
</code></pre>

<p>ここでのheaderメソッドはcsvダウンロード時にヘッダを作るメソッドとします。</p>

<p>初めてソースを見た人はheaderメソッドを見ただけではそれがアップロードに使われるのかダウンロードに使われるのかわかりません。<br/>
downloadメソッドもしくはuploadメソッドを読んではじめてどちらで使えるかわかるようになるかと思います。</p>

<p>これを両方のメソッドを読まずにheaderメソッドがどこで必要とされているかを一発でわかるようにしたいと思います。</p>

<pre><code class="ruby">class Hoge
  module Download
    def download
      header
    end

    def header
    end
  end

  module Upload
    def upload
    end
  end

  include Download
  include Upload
end
</code></pre>

<p>機能毎(あるいは関心ごと)にメソッドをmoduleを使って閉じ込めることで、<br/>
headerメソッドがどこで必要となるか一発でわかるようになりました。</p>

<p>またdownloadに不具合があった場合にはDownloadモジュールだけを読めばいいようになったため、読まなければいけないソースは格段に減ってコードリーディングする人の負担もだいぶ軽くなったのではないでしょうか？</p>

<p>今回は簡単な例ということでclassの中にmoduleを書いてしまいましたが、<br/>
moduleの処理が大きくなる場合にはもちろんファイル分割 &amp; 適切にクラス分割して記述するべきだと思います。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[i18nで例えば大人と子供で文言を変えたい場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context/"/>
        <updated>2015-10-28T20:41:26+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context</id>
        <content type="html"><![CDATA[<p>条件に応じて文言を変えたい場合があると思います。<br/>
例えば大人と子供で文言を変えたい場合とかですかね。<br/>
ログインユーザが大人の場合は大人料金と表示し、子供の場合は子供料金と表示するようにします。</p>

<pre><code class="erb">&lt;% if current_user.adult? %&gt;
  &lt;span&gt;大人料金&lt;/span&gt;
&lt;% else %&gt;
  &lt;span&gt;子供料金&lt;/span&gt;
&lt;% end %&gt;
</code></pre>

<p>これが一箇所ならいいですが、たくさん出現するとつらいですね。<br/>
helperにまとめたりするのでしょうか。<br/>
こういった文言だけのif文分岐がviewに大量に出現するとコード量も増え非常に見ずらく、またhelperに乱立してしまうのは避けたいですね。</p>

<p>そこで自動でi18nの読み込み先を条件に応じて読み替えたいと思います</p>

<p>ついでにjpmobile使用してviewをpcとスマフォで切り替えている場合に<br/>
lazy lookup記法時にスマフォページでsmart_phoneがついているlocaleを探してしまうのを防ぎます。</p>

<!-- more -->


<p>config/initializers/switch_translation_helper.rbを作ります。</p>

<pre><code class="ruby">module SwitchTranslationHelper
  def translate(key, options = {})
    prefix = current_user.adult? ? "adult" : "child"
    if request.smart_phone?
      if key.start_with?(".") &amp;&amp; @virtual_path.end_with?("_smart_phone")
        @virtual_path.gsub!("_smart_phone", "") # jpmobileが付与する_smart_phoneを削除
      end
    end

    if prefix.present?
      key = scope_key_by_partial(key)
      key = "#{prefix}.#{key}" # 先頭にprefixを差し込む 
    end

    super(key, options)
  end
end

(A)
module ActionView
  module Helpers
    module TranslationHelper
      prepend SwitchTranslationHelper
      alias :t :translate
    end
  end
end
</code></pre>

<p>上記の(A)でActionView::Helpers::TranslationHelperを再オープンしてprependでSwitchTranslationHelperを差し込みます。<br/>
これでメソッド呼び出しの順序がSwitchTranslationHelperのtransalteメソッドの方が先に呼ばれるようになります。<br/>
aliasは呼ばれたクロージャ的な動きで呼ばれた段階のメソッドが固定されるようなので再度SwitchTranslationHelperのメソッドを向くように設定しなおしています。</p>

<p>transalateメソッドではキーの先頭に大人ならadult、子供ならchildを挿入します。<br/>
またlazy lookup(先頭に.がついている呼びだし)時に<em>smart_phoneが含まれるview内の場合ではpcもスマフォも同一の文言を使いたいのでキーから</em>smart_phoneを削除しています。<br/>
その後superを読んで元のRailsのi18nの流れへ戻しています。<br/>
次にja.ymlを作ります。</p>

<pre><code class="yml">ja:
  # 大人の設定
  adult:
    price:
      show:
        fee: "大人料金"

  # 子供の設定
  child:
    price:
      show:
        fee: "子供料金"
</code></pre>

<p>これでpriceコントローラのshowアクションのテンプレート内で
<code>erb
&lt;%= t(".fee") %&gt;
</code>
とすると、ユーザが大人の場合は大人料金。<br/>
ユーザが子供の場合は子供料金と表示されます。</p>

<p>prefixの条件を変えることで読込先をうまく切り替えることができますね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[FaradayとHttpartyでクッキーを付与したい場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/10/16/set-cookie-with-faraday-or-httparty/"/>
        <updated>2015-10-16T17:33:25+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/10/16/set-cookie-with-faraday-or-httparty</id>
        <content type="html"><![CDATA[<p>同一ドメインなんだけどホスト名が違うシステムがあり、WEBサーバーからApiサーバーへjsonを取得するべくgetリクエストを投げる。<br/>
その際にWEBサーバーでログイン時に発行されたクッキーをリクエストに付与してapiサーバーではそのクッキーからユーザを特定するような処理が必要になった。</p>

<p>FaradayとHttpartyでクッキーを付与する方法を調べた。</p>

<!-- more -->


<h2>Faraday</h2>

<p><a href="https://github.com/miyagawa/faraday-cookie_jar">miyagawa/faraday-cookie_jar</a>というクッキーをよしなに扱ってくれるみたいですが、特に使わなくてもいけました。</p>

<pre><code class="ruby">client = Faraday.new 'http://example.com/api/list' do |b|
  b.request :json
  b.request :url_encoded
  b.adapter Faraday.default_adapter
end

res = client.get '' do |req|
  req.headers['Cookie'] = request.headers["HTTP_COOKIE"]
end

puts res.body
</code></pre>

<h2>Httparty</h2>

<pre><code class="ruby">include HTTParty

self.default_cookies.add_cookies(cookies.to_h)
res = self.get('http://example.com/api/list')
p res.inspect
</code></pre>

<p>お手軽ですね!</p>

<h3>2015年10月19日追記</h3>

<p>Httpartyのヘッダに乗せるタイプ</p>

<pre><code class="ruby">include HTTParty

res = self.get('http://example.com/api/list', headers: "Cookie" =&gt; request.headers["HTTP_COOKIE"])
p res.inspect
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxでセルの中の斜線を引く]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/07/28/axlsx-diagonal-border/"/>
        <updated>2015-07-28T18:55:24+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/07/28/axlsx-diagonal-border</id>
        <content type="html"><![CDATA[<p>またまた中々見つけられなかったテクニック。<br/>
セルの内部に斜線をひくです。</p>

<p>連日の調査で疲れます。</p>

<!-- more -->


<p>さくっと結論です。<br/>
edgesにdiagonalを指定して、diagonal_upかdiagonal_downにtrueを指定するです。<br/>
edgesにdiagonalを指定しろなんてどこにも書いてなかったので大変でした。</p>

<p>コードにするとこうです。</p>

<pre><code class="ruby">require 'axlsx'

package = Axlsx::Package.new
sheet = package.workbook.add_worksheet(name: 'lists')

diagonal_up = sheet.styles.add_style(
                              {
                               :border =&gt; {
                                 :edges =&gt; [:diagonal],
                                 :color =&gt; "000000",
                                 :style =&gt; :thin,
                                 diagonal_up: true
                               }
                              }
                            )
diagonal_down = sheet.styles.add_style(
                              {
                               :border =&gt; {
                                 :edges =&gt; [:diagonal],
                                 :color =&gt; "000000",
                                 :style =&gt; :thin,
                                 diagonal_down: true
                                }
                              }
                            )

diagonal_both = sheet.styles.add_style(
                              {
                               :border =&gt; {
                                 :edges =&gt; [:diagonal],
                                 :color =&gt; "000000",
                                 :style =&gt; :thin,
                                 diagonal_down: true,
                                 diagonal_up: true
                               }
                              }
                            )


sheet.add_row(['斜線1'], style: diagonal_up)
sheet.add_row([''])
sheet.add_row(['斜線2'], style: diagonal_down)
sheet.add_row([''])
sheet.add_row(['斜線3'], style: diagonal_both)

package.serialize('test.xlsx')
</code></pre>

<p><img src="/images/blog/2015-07-28.png" alt="Axlsx border diagonal" /></p>

<p>もしくはこれでもいけます。</p>

<pre><code class="ruby">require 'axlsx'

package = Axlsx::Package.new
sheet = package.workbook.add_worksheet(name: 'lists')

diagonal_style = sheet.styles.add_style(
                              {
                               :border =&gt; {
                                 :edges =&gt; [:left, :right],
                                 :color =&gt; "000000",
                                 :style =&gt; :thin 
                               }
                              }
                            )

br = package.workbook.styles.borders[package.workbook.styles.cellXfs[diagonal_style].borderId]
br.diagonalUp = true
br.diagonalDown = true
br.prs &lt;&lt; Axlsx::BorderPr.new(
  name: :diagonal,
  color: Axlsx::Color.new(rgb: '000000'),
  style: :thin,
)


sheet.add_row(['斜め線をひく'], style: diagonal_style)

package.serialize('test.xlsx')
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxで縦書き]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/07/27/orientation-xlvertical-with-axlsx/"/>
        <updated>2015-07-27T18:19:53+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/07/27/orientation-xlvertical-with-axlsx</id>
        <content type="html"><![CDATA[<p>Axlsxでセルの内容を縦書きにする方法がわかったので日記に記します。<br/>
セルに角度を付ける方法は見つかったんですが、縦書きにする方法が全然見つからずかなりはまりました。</p>

<!-- more -->


<p>VBAだと縦書きはこう設定できますね。</p>

<pre><code class="vbnet">Range("D2").Orientation = xlVertical  
</code></pre>

<p>色々と調べて、xlVerticalの値である-4166をセットしていしてみたりしましたがなかなかうまくゆかず。<br/>
色々と検索して、最終的にcellXfsというキーワードからなぜか<a href="http://bbs.wankuma.com/index.cgi?mode=al2&amp;namber=5358&amp;KLOG=15">C# vb.netの質問掲示板</a>で発見しましした(圧倒的感謝!)<br/>
textRotationを255を指定すればいけるそうです。</p>

<pre><code class="ruby">require 'axlsx'

package = Axlsx::Package.new
sheet = package.workbook.add_worksheet(name: 'lists')

vertical_text = sheet.styles.add_style(
    {
      alignment: { 
        horizontal: :center,
        vertical: :center ,
        textRotation: 255
      }
    }
)

sheet.add_row(['とっても長いテキスト', '短いテキスト'], style: vertical_text)

package.serialize('test.xlsx')
</code></pre>

<p>できないのかもと本気で諦めかけていたので出来た時には変な声がでてしまいました。</p>

<p><img src="/images/blog/2015-07-27.png" alt="Axlsx Orientaion xlVertical" /></p>
]]></content>
    </entry>
    
</feed>
