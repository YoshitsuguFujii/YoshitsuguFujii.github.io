<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2018-03-12T13:01:24+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[最後にサインアウトした時間が欲しい]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/03/12/current-sign-out-at/"/>
        <updated>2018-03-12T12:51:13+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/03/12/current-sign-out-at</id>
        <content type="html"><![CDATA[<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>before_logoutというwardenのフックメソッドがあるのでそこに追加<br/>
自分はconfig/initializers/devise.rbに追加しちゃいました。</p>

<pre><code class="ruby">Warden::Manager.before_logout do |user,auth,opts|
  if user.is_a?(User)
    user.update_column(:current_sign_out_at, Time.current)
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Railsでredirect_toが呼ばれたか判定]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/03/05/rails-redirect-called/"/>
        <updated>2018-03-05T11:34:15+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/03/05/rails-redirect-called</id>
        <content type="html"><![CDATA[<p>アクションメソッドから呼び出したメソッドで呼ばれているかどうか</p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p><a href="http://www.rubydoc.info/gems/rack/Rack/Response/Helpers#redirect%2F-instance_method">#redirect?</a></p>

<pre><code class="ruby">response.redirect?
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[GrapeでCSRF対策]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/02/26/csrf-with-grape/"/>
        <updated>2018-02-26T17:38:51+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/02/26/csrf-with-grape</id>
        <content type="html"><![CDATA[<p>セキュリティ試験を受けたらapiでpostしている箇所がcsrf違反でレポートが上がってきました。<br/>
apiでcsrfって必要なの？<br/>
って感じでしたが実際にレポートあがってきてしまっているしよくよく考えたら必要じゃんってなったので実装します。</p>

<p>ググってみると情報が少ないですね。<br/>
みなさんgrapeでcsrfどうしているんでしょう。</p>

<!-- more -->


<p></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>gistでサンプル見つけましたが、<br/>
<a href="https://gist.github.com/jandudulski/f3799ca67b7b08ded0c6">jandudulski/auth.rb</a><br/>
Rails5.1.4では動きません。</p>

<p><a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/request_forgery_protection.rb">actionpackのcsrfの実装</a><br/>
をみながら実装してみます。</p>

<p>結果としてはこんな感じになりました。</p>

<pre><code class="ruby">module V1
  module RequestForgeryProtectionHelper
    def session
      env['rack.session']
    end

    def protect_against_forgery
      unless verified_request?
        Rails.logger.error("[API] Can't verify CSRF token authenticity.")
        error!(
          {
            result: 401,
            status: 'error',
            type: 'csrf_error',
            message: "Can't verify CSRF token authenticity."
          }, 401
        )
      end
    end

    def verified_request?
      !protect_against_forgery? || request.get? || request.head? ||
        authenticity_token_valid?
    end

    def authenticity_token_valid?
      encoded_masked_token = request.headers['X-CSRF-Token'] || request.headers['X-Csrf-Token']
      return false if encoded_masked_token.blank?
      masked_token = Base64.strict_decode64(encoded_masked_token)

      anonymous_controller = ApplicationController.new
      if masked_token.length == ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH
        anonymous_controller.send(:compare_with_real_token, masked_token, session)
      elsif masked_token.length == ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH * 2
        csrf_token = anonymous_controller.send(:unmask_token, masked_token)

        anonymous_controller.send(:compare_with_real_token, csrf_token, session)
      else
        false # Token is malformed.
      end
    end

    def protect_against_forgery?
      allow_forgery_protection = Rails.configuration.action_controller.allow_forgery_protection
      allow_forgery_protection.nil? || allow_forgery_protection
    end
  end
end
</code></pre>

<pre><code class="ruby">module V1
  class Root &lt; Grape::API
    helpers RequestForgeryProtectionHelper

    before do
      protect_against_forgery
    end
  end
end
</code></pre>

<p>クライアント側</p>

<pre><code class="javascript">var token = $( 'meta[name="csrf-token"]' ).attr( 'content' );
$.ajaxSetup({
  beforeSend: function ( xhr ) {
    xhr.setRequestHeader( 'X-CSRF-Token', token );
  }
});
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Doorkeeperの認証で使われるtokenを取得]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/02/15/get-doorkeeper-token/"/>
        <updated>2018-02-15T11:46:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/02/15/get-doorkeeper-token</id>
        <content type="html"><![CDATA[<p>doorkeeprの処理のなかで削除済のユーザのステータスが取りたくて、tokenを取得できるかやってみました。</p>

<p>イレギュラーアクセス -> tokenが取れない。<br/>
通常のアクセス -> tokenが取れる。ユーザがひける。<br/>
削除済または退会済みユーザへのアクセス -> tokenが取れる。ユーザがひけない。</p>

<p>って感じでしょうか？</p>

<!-- more -->


<p></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>下記のようにしたら取れました。<br/>
あとはこれをうまくつかってerrorとかで削除済のレスポンスを返す感じですね。</p>

<pre><code class="ruby"># frozen_string_literal: true

require 'doorkeeper/grape/helpers'

module V1
  class Root &lt; Grape::API
    helpers Doorkeeper::Grape::Helpers

    before do
      authorization_request = Doorkeeper::Grape::AuthorizationDecorator.new(request)

      # これでrequestからtokenが取れる
      token = Doorkeeper::OAuth::Token.from_request(authorization_request, *Doorkeeper.configuration.access_token_methods)

      # そのトークンを使ってユーザのトークンが取れる。
      access_token = Doorkeeper::AccessToken.by_token(token)

      doorkeeper_authorize!
    end

    mount Users
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[S3に直接にファイルアップロード]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/02/14/direct-upload-to-s3-with-rails-and-carrierwave/"/>
        <updated>2018-02-14T18:35:13+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/02/14/direct-upload-to-s3-with-rails-and-carrierwave</id>
        <content type="html"><![CDATA[<p>Herokuでの大きいファイルアップロードはリクエストタイムアウトが30秒に設定されているのでやっかいです。</p>

<p>Herokuの公式でも4MBを超えるファイルをあげる場合はS3に直接あげてねって書いてあります。<br/>
<a href="https://devcenter.heroku.com/articles/s3#direct-upload">https://devcenter.heroku.com/articles/s3#direct-upload</a></p>

<pre><code>This is the preferred approach if you’re working with file uploads bigger than 4MB. The idea is to skip the hop to your dyno, making a direct connection from the end user browser to S3. While this reduces the processing required by your application it is a more complex implementation and limits the ability to modify (transform, filter, resize etc…) the file before storing in S3.
</code></pre>

<p>carriwaveを使っているのでcarriwave_directいいなと思いましたが、<br/>
<a href="https://github.com/dwilkie/carrierwave_direct">carrierwave_direct</a></p>

<p>最終更新日が結構前でメンテされていないのかな？ってのとgemを使いすぎるとわけわかめになるので自力でやることにしました。</p>

<!-- more -->


<p></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>署名付きアップロード用のリンクを生成してjsに渡しjsでそのurlにアップロードする流れです。</p>

<p>Awsコンソールにログインしてs3からBucketを作成します。<br/>
作成したBucketを選択してアクセス権限タブからCORSの設定を開きます。<br/>
以下のように設定します。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/"&gt;
&lt;CORSRule&gt;
    &lt;AllowedOrigin&gt;*&lt;/AllowedOrigin&gt;
    &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;
    &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;
    &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;
    &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;
&lt;/CORSRule&gt;
&lt;/CORSConfiguration&gt;
</code></pre>

<p>次にGemfileに追記してbundle install</p>

<pre><code class="ruby"># Gemfile
gem 'aws-sdk'
</code></pre>

<p>S3_BUCKETを操作できるようにします。</p>

<pre><code class="ruby"># config/initializers/aws.rb
credentials = Aws::Credentials.new(
  ENV[:aws_access_key],
  ENV[:aws_secret]
)

s3_resource = Aws::S3::Resource::new(region: 'bucketのregion', credentials: credentials)
S3_BUCKET = s3_resource.bucket('bucket名')
</code></pre>

<p>URL生成のメソッドはCarrierwaveのuploaderクラスにメソッド生やしました。<br/>
取得はそのままCarrierwaveを使うイメージです。<br/>
今のプロジェクトでは基底クラスを作ってそれを継承させてます。</p>

<pre><code class="ruby">class ApplicationUploader &lt; CarrierWave::Uploader::Base
  def store_dir
    "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  end

  def presigned_url(file_name = nil)
    file_name ||= self.model.attributes[mounted_as.to_s]
    object = S3_BUCKET.object([store_dir, file_name].join('/'))
    object.presigned_url(:put, expires_in: 1.minutes.to_i, acl: 'private')
  end
end

class ImageUploader &lt; ApplicationUploader
end
</code></pre>

<p>これで以下のように署名付きリンクを生成できます。</p>

<pre><code>user = User.find(1)
user.image.presigned_url # =&gt; 署名付きのs3直アップロードurl
</code></pre>

<p>署名付きリンクはデフォルトで900秒（15分）で失効します(上記uploaderでは1分にしている)<br/>
そのためcontrollerに生成してhiddenとかgonで渡すのはやめたほうがいい気がします。</p>

<p>jsで署名付きリンク生成リクエストをもらってurlを返し、そのurlでs3にアップロードするようにします。</p>

<p>Grapeでapiを作ります。</p>

<pre><code>params do
  requires :file_name, type: String, desc: 'ファイル名'
end
post do
  user = User.create
  user.update_column('image', params[:file_name])
  {id: user.id, filename: params[:file_name], url: user.image.presigned_url}
end
</code></pre>

<p>carriwaveで処理させたいのですがstore先にidが必要なため保存しています。</p>

<p>以下リンク取得からアップロードまでのサンプルです。<br/>
ちょっと適当な部分があるので動かなかったらすいません。</p>

<pre><code class="js">let fd = new FormData();
fd.append('file', $('.file'));

$.ajax({
  url : 'grapeのurl',
  data : {file_name: fileData.get('file').name},
  type : 'post',
  dataType : 'json'
}).then(function(data) {
  $.ajax({
    url : data.url,
    data : fileData.get('file'),
    type : 'put',
    dataType : 'xml',
    processData : false,
    contentType : false,
    success : function(){
      console.log('成功したよー');
    },
    error : function(){
      console.log('失敗。無念');
    }
  });
});
</code></pre>

<p>carrierwave-attachmentscannerを使っていたんですが、これは直アップロードだと使えないので、保存と同時にafter_saveでsidekiqのキューに押し込んであとでウィルスチェックしています。</p>
]]></content>
    </entry>
    
</feed>
