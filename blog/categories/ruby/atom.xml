<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2015-07-17T14:01:39+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[ckeditorのテーブルのデフォルト値を変更]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/07/15/ckeditor-table-width/"/>
        <updated>2015-07-15T16:56:33+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/07/15/ckeditor-table-width</id>
        <content type="html"><![CDATA[<p>相変わらず使わせてもらってます。<a href="https://github.com/galetahub/ckeditor">ckeditor</a><br/>
デフォルトでテーブルのサイズが500pxとなっておりますが、スマートフォンでも表示する必要がありこれを100%にしたくてしらべました。<br/>
ついでに邪魔なのでborderとcellspacingの値も0にしちゃいましょう。</p>

<!-- more -->


<pre><code class="js app/assets/javascripts/ckeditor/config.js">CKEDITOR.on( 'dialogDefinition', function( ev ) {
    var dialogName = ev.data.name;
    var dialogDefinition = ev.data.definition;

    if ( dialogName == 'table' ) {
        var info = dialogDefinition.getContents( 'info' );

        info.get( 'txtWidth' )[ 'default' ] = '100%';
        info.get( 'txtBorder' )[ 'default' ] = '0';
        info.get( 'txtCellSpace' )[ 'default' ] = '0';
    }
});
</code></pre>

<p>テーブルダイアログが初期値で幅100%、枠線の幅0、セル内余白0になっているのが確認できます。<br/>
<img src="/images/blog/2015-07-15%2017.00.59.png" alt="完成イメージ" /></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxでセルのなかのテキストに部分的にスタイルを当てる]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/07/14/partially-change-string-style-in-cell-with-axlsx/"/>
        <updated>2015-07-14T20:28:04+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/07/14/partially-change-string-style-in-cell-with-axlsx</id>
        <content type="html"><![CDATA[<p>Axlsxでセルの中の文字にスタイルをあてる方法です 。<br/>
Axlsx::RichTextを使います。<br/>
太字、斜体、打ち消し戦、アンダーライン、色変更に対応しております。</p>

<!-- more -->


<pre><code class="ruby">p = Axlsx::Package.new
p.use_shared_strings = true
wb = p.workbook
wrap_text = wb.styles.add_style({:alignment =&gt; {:horizontal =&gt; :center, :vertical =&gt; :center, :wrap_text =&gt; true}}  )
rt = Axlsx::RichText.new
rt.add_run('I\'m bold, ', :b =&gt; true)
rt.add_run('I\'m italic, ', :i =&gt; true)
rt.add_run('I\'m strike' + "\n", :strike =&gt; true)
rt.add_run('I\'m bold, italic and strike' + "\n", :b =&gt; true, :i =&gt; true, :strike =&gt; true)
rt.add_run('I\'m style-less :D')
rt.add_run('underlined and red.', :u =&gt; :double, :color =&gt; 'FF0000')
wb.add_worksheet(:name =&gt; "RichText") do | sheet |
sheet.add_row [rt], :style =&gt; wrap_text
end
p.serialize 'rich_text.xlsx'
</code></pre>

<p><img src="/images/blog/2015-07-14%2020.30.19.png" alt="完成イメージ" /></p>

<p>Axlsxなんでもできますね！</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[ファイル名に_smart_phoneをつけて複製]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/07/09/rename-file-name-for-jp-mobile/"/>
        <updated>2015-07-09T12:09:42+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/07/09/rename-file-name-for-jp-mobile</id>
        <content type="html"><![CDATA[<p>スマートフォンサイトの表示に<a href="https://github.com/jpmobile/jpmobile">jpmobile</a>を使ってます。<br/>
これはこのようにApplicationcontrollerとかに書くと</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  include Jpmobile::ViewSelector
end 
</code></pre>

<!-- more -->


<p>PCからのアクセスの場合にはindex.html.erbを表示し<br/>
スマートフォンからのアクセスの場合にはindex_smart_phone.html.erbを表示してくれるという機能を使っています。</p>

<p>今回先にPCサイトがあり、それのスマフォサイトを作るにあたってPCのファイルを上記命名規則に則ってコピーする必要があったのでスクリプト書きました。</p>

<pre><code class="ruby convert_smartphone_name">#! /usr/bin/env ruby
require 'fileutils'

def print_green(str)
  puts "\e[32m#{str}\e[0m"
end

def print_red(str)
  puts "\e[31m#{str}\e[0m"
end

def print_yellow(str)
  puts "\e[33m#{str}\e[0m"
end

if ARGV[0].nil?
  print_red "対象ディレクトリへのパスを指定してください"
end

Dir.glob('*').each do |file|
  next if FileTest::directory?(file)
  dest = file.split(".").inject(String.new) do |str, chunk|
    if chunk == "html"
      str &lt;&lt; "_smart_phone"
    end

    if str == ""
      str &lt;&lt; "#{chunk}"
    else
      str &lt;&lt; ".#{chunk}"
    end
  end

  print_yellow "convert #{file} to #{dest}"
  FileUtils.cp(file, dest)
end

print_green "done."
</code></pre>

<p>これを実行可能なところにおいて、chmod +xで実行可能にしてもらって、<br/>
convert_smartphone_name [対象ディレクトリのパス]<br/>
とかってやれば対象ディレクトリ内のファイルが全部_smart_phone付きでコピーされるはずです。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[ckeditorのスタイルにカスタムスタイル追加する方法]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/06/24/ckeditor-customer-style/"/>
        <updated>2015-06-24T12:41:08+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/06/24/ckeditor-customer-style</id>
        <content type="html"><![CDATA[<p>Railsに脆弱性があったみたいですね<br/>
<a href="http://weblog.rubyonrails.org/2015/6/16/Rails-3-2-22-4-1-11-and-4-2-2-have-been-released-and-more/">Rails 3.2.22, 4.1.11 and 4.2.2 have been released and more</a></p>

<p>さっそく今やってるPGのrailsのバージョンをあげました。</p>

<p>さて<br/>
WYSIWYGエディタの<a href="http://ckeditor.com/demo">ckeditor</a>がすごくいい感じで使わせてもらっています。</p>

<p>gemがあったので私はこれを使ってckeditorを利用しています。<br/>
<a href="https://github.com/galetahub/ckeditor">ckeditor</a></p>

<p>今回はこのckeditorにプルダウンで表示されるスタイルをカスタマイズする方法です。</p>

<!-- more -->


<p>環境はこんな感じ。</p>

<p>開発環境<br/>
- rails (4.2.2)<br/>
- simple_form (3.1.0)<br/>
- ckeditor (4.1.1)</p>

<p>インストールがすんでうまく表示されるようになったら、以下の感じに修正します。</p>

<pre><code class="js app/assets/javascripts/ckeditor/config.js">config.stylesSet = 'my_styles';
CKEDITOR.stylesSet.add( 'my_styles', [
    // Block Styles
    { name: 'Blue Title',       element: 'h3',      styles: { 'color': 'Blue' } },
    { name: 'Red Title',        element: 'h3',      styles: { 'color': 'Red' } },

    // Inline Styles
    { name: 'Marker: Yellow',   element: 'span',    styles: { 'background-color': 'Yellow' } },
    { name: 'Marker: Green',    element: 'span',    styles: { 'background-color': 'Lime' } },

    // Object Styles
    {
        name: 'Image on Left',
        element: 'img',
        attributes: {
            style: 'padding: 5px; margin-right: 5px',
            border: '2',
            align: 'left'
        }
    }
] );
</code></pre>

<p>するとスタイルの中身が上記のものにきり変わっていると思います。</p>

<p><img src="/images/blog/ckeditor_custom_style_2015-06-24.png" alt="ckeditor" /></p>

<p>できましたね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[simple_formで表示されるエラーをfull_messagesのものにする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/06/11/simple-form-error-full-message/"/>
        <updated>2015-06-11T14:30:19+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/06/11/simple-form-error-full-message</id>
        <content type="html"><![CDATA[<pre><code class="ruby">#開発環境
rails (4.2.1)
simple_form (3.1.0)
</code></pre>

<p>simple_formをそのまま使うとエラー発生時のエラーの表示がfull_messageではなく、object.errors[:name]みたいにした時の値しか表示してくれない。</p>

<p>こんな感じ。<br/>
<img src="/images/blog/simple_form_error2015-06-10.png" alt="normal error" /></p>

<p>ちょっとこれだとあんまりなのでfull_messageでメッセージを表示したい</p>

<!-- more -->


<p>この<a href="https://github.com/plataformatec/simple_form/issues/989">issue</a>でこの問題にパッチを当てている人がいたのでそのままパクらせていただきます。</p>

<p>こうするだけ<br/>
<code>ruby config/initializer/simple_form_error_path.rb
module SimpleForm::Components::Errors
  def errors_on_attribute
    object.errors.full_messages_for(attribute_name)
  end
end
</code></p>

<p>するとこうなります。<br/>
<img src="/images/blog/simple_form_full_error2015-06-10.png" alt="full error" /><br/>
いい感じですね。</p>
]]></content>
    </entry>
    
</feed>
