<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: ruby | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/ruby/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2016-02-02T17:18:15+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[RailsConfig(現Config)で読み込んでいるファイルのパスを得る]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/02/02/rails-config-check-load-files-path/"/>
        <updated>2016-02-02T11:13:32+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/02/02/rails-config-check-load-files-path</id>
        <content type="html"><![CDATA[<p>内部的にrails_envを書き換えたりしていて、rails_configの値がただしくRAILS_ENVの設定通りにファイルを読み込んでくれない事象が発生したので。</p>

<p>rails_config (0.4.2)</p>

<pre><code class="ruby">irb(main):014:0&gt; Settings.instance_variable_get(:@config_sources)
=&gt; [#&lt;RailsConfig::Sources::YAMLSource:0x0055a28d40ab48 @path="Rails_rootへのパス/current/config/settings.yml"&gt;, #&lt;RailsConfig::Sources::YAMLSource:0x0055a28d40aa30 @path="Rails_rootへのパス/current/config/settings/hoge.yml"&gt;, #&lt;RailsConfig::Sources::YAMLSource:0x0055a28d40a9e0 @path="Rails_rootへのパス/current/config/environments/hoge.yml"&gt;]
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[jpmobileでPCでスマートフォンのビューを表示する場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/01/22/jpmobile-enforce-sp-view-for-pc/"/>
        <updated>2016-01-22T18:51:27+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/01/22/jpmobile-enforce-sp-view-for-pc</id>
        <content type="html"><![CDATA[<p>なんらかの条件で強制的にスマートフォンのviewを使いたい時。
アプリのwebviewとか？</p>

<pre><code class="ruby">before_filter :hoge
def hoge
  if true # 条件
    env["rack.jpmobile"] = Jpmobile::Mobile::SmartPhone.new(env, request)
    register_mobile
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[リーダブルコードを意識しながら普段気をつけていること(2)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-2/"/>
        <updated>2015-11-18T11:33:53+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-2</id>
        <content type="html"><![CDATA[<p>普段コードを書く時にリーダブルなコードを書く時に気をつけていることです。<br/>
第１回目は<a href="http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-1/">コンテキストを作る</a>でした</p>

<p>第２回目は</p>

<p><strong>早めにパターンを潰す</strong></p>

<!-- more -->


<p>何かの処理を追うときおそらく上から順に処理を追って読んでいくと思います。</p>

<p>読み進める中でユーザがタイプAのユーザだったらどうなのか、利用停止中のユーザだったらどうなるのかということがふと疑問に浮かんだりします。<br/>
その際に読み手は頭の片隅にその疑問を一時格納していて、その処理が書かれているところまで気にしながら読み進むわけです。<br/>
そうなると考慮されていない場合などは最後まで読まなければわかりません。</p>

<p>この疑問を頭の片隅に仮置きしながらコードを読むのはかなりのエネルギーを使うし、ストレスだったりします(少なくとも僕は)<br/>
しかもそれが複雑なシステムでいくつものパターンがある場合は気にしなきゃいけないパターンが膨大になります。</p>

<p>なので読み手の負担にならないように、なるべくパターンは早い段階でリターンするといいですね。</p>

<pre><code class="ruby">class User
  def hard_work
    return unless user.new_commer?
    return unless user.project.burning?
    return unless user.shachiku?

    # 永遠と続くハードワークの長い記述
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
    do_work(holiday: false)
  end
end
</code></pre>

<p>早い段階で新人と社畜とプロジェクトが炎上していない限りはハードワークは必要ないというのがわかりますね。 <br/>
ないとメソッドの最後まで読まないと新人がハードワークしなきゃいけないのかとハラハラしなきゃいけなくなります。</p>

<p>こういう書き方になれると、例えばどこかで新人が精神を病むような強烈な重労働を強いられているという不具合が上がってきた時にもhard_workメソッドは最初に新人はreturnしているので、すぐにここには不具合がないということもわかります。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[リーダブルコードを意識しながら普段気をつけていること(1)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-1/"/>
        <updated>2015-11-18T11:33:53+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/11/18/readable-code-1</id>
        <content type="html"><![CDATA[<p>初のシリーズもの。不定期開催します。<br/>
普段コードを書く時にリーダブルなコードを書く時に気をつけていることです。<br/>
思いついたら書いていきます。</p>

<p>第１回目は</p>

<p><strong>コンテキストを作る</strong></p>

<!-- more -->


<p>例えばcsvアップロード機能・ダウンロード機能を作ったときに以下のようなメソッドがあるとします。</p>

<pre><code class="ruby">class Hoge
  def download
    header
  end

  def upload
  end

  private
  def header
  end
end
</code></pre>

<p>ここでのheaderメソッドはcsvダウンロード時にヘッダを作るメソッドとします。</p>

<p>初めてソースを見た人はheaderメソッドを見ただけではそれがアップロードに使われるのかダウンロードに使われるのかわかりません。<br/>
downloadメソッドもしくはuploadメソッドを読んではじめてどちらで使えるかわかるようになるかと思います。</p>

<p>これを両方のメソッドを読まずにheaderメソッドがどこで必要とされているかを一発でわかるようにしたいと思います。</p>

<pre><code class="ruby">class Hoge
  module Download
    def download
      header
    end

    def header
    end
  end

  module Upload
    def upload
    end
  end

  include Download
  include Upload
end
</code></pre>

<p>機能毎(あるいは関心ごと)にメソッドをmoduleを使って閉じ込めることで、<br/>
headerメソッドがどこで必要となるか一発でわかるようになりました。</p>

<p>またdownloadに不具合があった場合にはDownloadモジュールだけを読めばいいようになったため、読まなければいけないソースは格段に減ってコードリーディングする人の負担もだいぶ軽くなったのではないでしょうか？</p>

<p>今回は簡単な例ということでclassの中にmoduleを書いてしまいましたが、<br/>
moduleの処理が大きくなる場合にはもちろんファイル分割 &amp; 適切にクラス分割して記述するべきだと思います。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[i18nで例えば大人と子供で文言を変えたい場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context/"/>
        <updated>2015-10-28T20:41:26+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/10/28/inject-identifier-from-context</id>
        <content type="html"><![CDATA[<p>条件に応じて文言を変えたい場合があると思います。<br/>
例えば大人と子供で文言を変えたい場合とかですかね。<br/>
ログインユーザが大人の場合は大人料金と表示し、子供の場合は子供料金と表示するようにします。</p>

<pre><code class="erb">&lt;% if current_user.adult? %&gt;
  &lt;span&gt;大人料金&lt;/span&gt;
&lt;% else %&gt;
  &lt;span&gt;子供料金&lt;/span&gt;
&lt;% end %&gt;
</code></pre>

<p>これが一箇所ならいいですが、たくさん出現するとつらいですね。<br/>
helperにまとめたりするのでしょうか。<br/>
こういった文言だけのif文分岐がviewに大量に出現するとコード量も増え非常に見ずらく、またhelperに乱立してしまうのは避けたいですね。</p>

<p>そこで自動でi18nの読み込み先を条件に応じて読み替えたいと思います</p>

<p>ついでにjpmobile使用してviewをpcとスマフォで切り替えている場合に<br/>
lazy lookup記法時にスマフォページでsmart_phoneがついているlocaleを探してしまうのを防ぎます。</p>

<!-- more -->


<p>config/initializers/switch_translation_helper.rbを作ります。</p>

<pre><code class="ruby">module SwitchTranslationHelper
  def translate(key, options = {})
    prefix = current_user.adult? ? "adult" : "child"
    if request.smart_phone?
      if key.start_with?(".") &amp;&amp; @virtual_path.end_with?("_smart_phone")
        @virtual_path.gsub!("_smart_phone", "") # jpmobileが付与する_smart_phoneを削除
      end
    end

    if prefix.present?
      key = scope_key_by_partial(key)
      key = "#{prefix}.#{key}" # 先頭にprefixを差し込む 
    end

    super(key, options)
  end
end

(A)
module ActionView
  module Helpers
    module TranslationHelper
      prepend SwitchTranslationHelper
      alias :t :translate
    end
  end
end
</code></pre>

<p>上記の(A)でActionView::Helpers::TranslationHelperを再オープンしてprependでSwitchTranslationHelperを差し込みます。<br/>
これでメソッド呼び出しの順序がSwitchTranslationHelperのtransalteメソッドの方が先に呼ばれるようになります。<br/>
aliasは呼ばれたクロージャ的な動きで呼ばれた段階のメソッドが固定されるようなので再度SwitchTranslationHelperのメソッドを向くように設定しなおしています。</p>

<p>transalateメソッドではキーの先頭に大人ならadult、子供ならchildを挿入します。<br/>
またlazy lookup(先頭に.がついている呼びだし)時に<em>smart_phoneが含まれるview内の場合ではpcもスマフォも同一の文言を使いたいのでキーから</em>smart_phoneを削除しています。<br/>
その後superを読んで元のRailsのi18nの流れへ戻しています。<br/>
次にja.ymlを作ります。</p>

<pre><code class="yml">ja:
  # 大人の設定
  adult:
    price:
      show:
        fee: "大人料金"

  # 子供の設定
  child:
    price:
      show:
        fee: "子供料金"
</code></pre>

<p>これでpriceコントローラのshowアクションのテンプレート内で
<code>erb
&lt;%= t(".fee") %&gt;
</code>
とすると、ユーザが大人の場合は大人料金。<br/>
ユーザが子供の場合は子供料金と表示されます。</p>

<p>prefixの条件を変えることで読込先をうまく切り替えることができますね。</p>
]]></content>
    </entry>
    
</feed>
