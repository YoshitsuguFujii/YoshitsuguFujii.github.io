<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: golang | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/golang/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2016-05-06T12:28:07+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Go言語を使ってローカルマシン上でbotを動かしSlackでtodo管理をする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/11/10/slack-todo-bot/"/>
        <updated>2015-11-10T20:29:05+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/11/10/slack-todo-bot</id>
        <content type="html"><![CDATA[<p>前回の続編です。</p>

<p><a href="http://yoshitsugufujii.github.io/blog/2015/09/04/golang-bot-for-slack/">Go言語を使ってローカルマシンに簡易botを作ってSlackに投稿</a></p>

<p>botを使ったtodo機能をslackに付与するべくgoのコードを書いてみました。</p>

<p><code>todo コマンド </code></p>

<p>という感じでつぶやくと、</p>

<p>チャンネル毎にtodoリストが管理できるようにしたいと思います。<br/>
dbがなくても動くようにファイルに保存します。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">操作</th>
<th style="text-align:left;">コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">追加</td>
<td style="text-align:left;"> add 追加したいテキスト </td>
</tr>
<tr>
<td style="text-align:left;">削除</td>
<td style="text-align:left;"> del 削除したいテキスト </td>
</tr>
<tr>
<td style="text-align:left;">一覧</td>
<td style="text-align:left;"> list </td>
</tr>
<tr>
<td style="text-align:left;">全削除</td>
<td style="text-align:left;"> clear </td>
</tr>
</tbody>
</table>


<p>こんな感じで動きます。</p>

<p><img src="/images/blog/todo_bot_sample.gif" alt="todobot" /></p>

<p>便利そうですね！</p>

<!-- more -->


<p>まずはslacbot.goにmainの処理を書いていきます。</p>

<pre><code class="go ">package main

import (
    "./todo_list"
    "fmt"
    "net/http"
)

var p = fmt.Println

func todoListBot(w http.ResponseWriter, r *http.Request) {
    checkUser(w, r, func(text string, channel_name string) {
        return_text := todo.Accept(text, channel_name)
        fmt.Fprintf(w, "{\"text\": \"%s\"}", return_text)
    })
}

func checkUser(w http.ResponseWriter, r *http.Request, proc func(text string, channel_name string)) {
    if r.Method == "POST" {
        text := r.FormValue("text")
        user_name := r.FormValue("user_name")
        channel_name := r.FormValue("channel_name")

        if user_name != "slackbot" {
            p("user_name:", user_name)
            p("channel_name:", channel_name)
            proc(text, channel_name)
        }
    }
}

func main() {
    http.HandleFunc("/todo", todoListBot)
    http.ListenAndServe(":8888", nil)
}
</code></pre>

<p>続いて実装です。<br/>
一段階層を下げます。<br/>
todo_listというディレクトリを作ってそこにtodo.goを置きます。</p>

<pre><code class="go ">package todo

import (
    "../util"
    "fmt"
    "io/ioutil"
    "log"
    "os"
    "strings"
)

const ADD = "add"
const DEL = "del"
const LIST = "list"
const CLEAR = "clear"
const STORE_DIR = "todo_list/stored_files"

var p = fmt.Println

func Accept(text string, channel_name string) string {
    var command string
    var message string
    var rtn_text string

    if validateParams(text) {
        command, message = parseText(text)
    } else {
        return "入力されたパラメータが不正です→ " + text
    }

    if command == ADD {
        rtn_text = add(channel_name, message)
    } else if command == DEL {
        rtn_text = del(channel_name, message)
    } else if command == LIST {
        rtn_text = list(channel_name)
    } else if command == CLEAR {
        rtn_text = clear(channel_name)
    }

    return rtn_text
}

func validateParams(text string) bool {
    var command string

    if len(strings.Split(text, " ")) &lt; 2 {
        return false
    }

    command = getCommand(text)
    correct_commands := []string{ADD, LIST, DEL, CLEAR}
    if !util.Contains(correct_commands, command) {
        return false
    }

    return true
}

func parseText(text string) (command string, post_text string) {
    command = getCommand(text)
    post_text = getMessage(text)
    return
}

func getTriggerWord(text string) string {
    return strings.Split(text, " ")[0]
}

func getCommand(text string) string {
    return strings.Split(text, " ")[1]
}

func getMessage(text string) string {
    if len(strings.Split(text, " ")) &gt; 2 {
        return strings.Split(text, " ")[2]
    } else {
        return ""
    }
}

func add(channel_name string, message string) string {
    // ディレクトリの作成
    err := os.MkdirAll(STORE_DIR, 0777)
    if err != nil {
        util.Perror(err)
    }

    file_path := getStoredPath(channel_name)
    // ファイルがなかったら作る
    if !util.FileExists(file_path) {
        util.CreateFile(file_path)
    }
    f, err := os.OpenFile(file_path, os.O_APPEND|os.O_WRONLY, 0600)

    if err != nil {
        return "ファイルのオープンに失敗しました"
    }
    defer f.Close()

    message = strings.Replace(message, "\n", " ", -1)
    if _, err = f.WriteString(message + "\n"); err != nil {
        return "書き込みに失敗しました"
    }

    lines, _ := getList(file_path)
    return "登録に成功しました :wink: \n 現在のタスク \n- " + strings.Join(lines, "\n- ")
}

func list(channel_name string) string {
    file_path := getStoredPath(channel_name)

    if !util.FileExists(file_path) {
        return "まだ何も書き込まれていません"
    }

    lines, _ := getList(file_path)

    return "現在のタスクです。\n気張っていきましょー :kissing_heart: \n\n- " + strings.Join(lines, "\n- ")
}

func del(channel_name string, message string) string {
    var del_flg bool
    var new_lines []string
    message = strings.Replace(message, "\n", " ", -1)
    file_path := getStoredPath(channel_name)

    if !util.FileExists(file_path) {
        return "まだ何も書き込まれていません"
    }

    lines, err := util.ReadLines(file_path)
    if err != nil {
        log.Fatalf("readLines: %s", err)
    }

    for i := 0; i &lt; len(lines); i++ {
        if lines[i] == message {
            del_flg = true
        }

        if lines[i] != message {
            new_lines = append(new_lines, lines[i])
        }
    }

    if del_flg {
        if len(new_lines) == 0 {
            if err := os.Remove(file_path); err != nil {
                return "クリアに失敗しました"
            }
        } else {
            content := []byte(strings.Join(new_lines, "\n") + "\n")
            ioutil.WriteFile(file_path, content, 0600)
        }

        if len(new_lines) != 0 {
            lines, _ = getList(file_path)
        }
        return "削除に成功しました :neutral_face: \n 残りのタスク \n- " + strings.Join(lines, "\n- ")
    } else {
        return "一致するものが見つかりませんでした"
    }
}

func clear(channel_name string) string {
    file_path := getStoredPath(channel_name)
    if err := os.Remove(file_path); err != nil {
        return "クリアに失敗しました"
    }

    return "クリアしました"
}

func getStoredPath(channel_name string) string {
    return STORE_DIR + "/" + channel_name
}

func getList(file_path string) ([]string, error) {
    lines, err := util.ReadLines(file_path)
    if err != nil {
        log.Fatalf("readLines: %s", err)
    }

    return lines, err
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Go言語を使ってローカルマシンに簡易botを作ってSlackに投稿]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/09/04/golang-bot-for-slack/"/>
        <updated>2015-09-04T17:17:58+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/09/04/golang-bot-for-slack</id>
        <content type="html"><![CDATA[<p>Goを勉強がてら使いながら簡易slackbotを作ってみました。<br/>
slackにデフォルトで用意されているslackbotってお願いしますをキーに登録すると、「お願いします]
とか「お願いします。」(句読点入り)は反応してくれるけど。 「よろしくお願いします。」みたいに単語をつなげると反応してくれない。</p>

<p>単純に単語が含まれるかだけで反応してくれればいいのに・・・</p>

<p>ということもありお手製slackbotをつくってみました。<br/>
自分のPCでプログラムを動かし、slackで投稿があった際にはOutgoing WebHooksで投稿内容を取得してBotとして返信したいと思います。</p>

<p>slack → ローカルmacのbot → slack</p>

<p>の流れです。</p>

<!-- more -->


<p>まずは外から自分のmacを見つけてもらうためにngrokにトンネルしてもらいましょう。<br/>
ngrokの設定とか概要はこちらを見てださい。<br/>
<a href="http://qiita.com/kitaro729/items/44214f9f81d3ebda58bd">ngrokを使用してローカル環境を外部に公開する</a><br/>
普段から最高にお世話になっているサービスです。</p>

<p>Slackの設定です。WebでSlackを開き左のMenuからIntegrationsを選びAll Servicesタブの中からOutgoing WebHooksを選択します。<br/>
新規作成画面のURL(s)にngrokで接続できるurlを設定します。<br/>
channelは新規でtestを。<br/>
Customeize NameにはBotが発言した時の名前が、Cutomize IconにはBotが発言した時のアイコンが設定できます。</p>

<p>これでslackの設定は完了です。</p>

<p>次にgoのプロググラムを動かします。<br/>
もしgoがインストールされてなかったらここ見るといいです。<br/>
<a href="http://qiita.com/morisuke/items/ce04479c1b26d83f4fe3">Golang開発環境 3分クッキング</a><br/>
あとyamlを使うのでyamlのライブラリもいれます。</p>

<pre><code>go get gopkg.in/yaml.v2
</code></pre>

<p>goのソースはこんな感じ
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">fmt</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">gopkg</span><span class="p">.</span><span class="nx">in</span><span class="o">/</span><span class="nx">yaml</span><span class="p">.</span><span class="nx">v2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">io</span><span class="o">/</span><span class="nx">ioutil</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">math</span><span class="o">/</span><span class="nx">rand</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">net</span><span class="o">/</span><span class="nx">http</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">strings</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">time</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">const</span> <span class="nx">WordTable</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">word</span><span class="p">.</span><span class="nx">yml</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">var</span> <span class="nx">p</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">Serve</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Method</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">POST</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">text</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">FormValue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">text</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="nx">user_name</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">FormValue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user_name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span>    <span class="k">if</span> <span class="nx">user_name</span> <span class="o">!=</span> <span class="s">&quot;slackbot&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">p</span><span class="p">(</span><span class="s">&quot;user_name:&quot;</span><span class="p">,</span> <span class="nx">user_name</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">return_text</span> <span class="o">:=</span> <span class="nx">detect_word</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;{\&quot;text\&quot;: \&quot;%s\&quot;}&quot;</span><span class="p">,</span> <span class="nx">return_text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">getWordTable</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">buf</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="nx">WordTable</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="nx">err</span> <span class="p">=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">m</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">keys</span><span class="p">(</span><span class="nx">words</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="kt">string</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span><span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">words</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">keys</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">detect_word</span><span class="p">(</span><span class="nx">post_text</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">bot_message</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dict</span> <span class="o">:=</span> <span class="nx">getWordTable</span><span class="p">()</span>  <span class="c1">// 設定を取得</span>
</span><span class='line'>    <span class="nx">word_keys</span> <span class="o">:=</span> <span class="nx">keys</span><span class="p">(</span><span class="nx">dict</span><span class="p">)</span> <span class="c1">// キーのみ抽出</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">suggestion</span> <span class="p">[]</span><span class="kt">string</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">word_keys</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Contains</span><span class="p">(</span><span class="nx">post_text</span><span class="p">,</span> <span class="nx">word_keys</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">suggestion</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">suggestion</span><span class="p">,</span> <span class="nx">dict</span><span class="p">[</span><span class="nx">word_keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">suggestion</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>    <span class="nx">bot_message</span> <span class="p">=</span> <span class="nx">suggestion</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">suggestion</span><span class="p">))]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">bot_message</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">Serve</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;:</span><span class="mi">8080</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>プログラムの中でソースと同一ディレクトリにあるword.ymlを読み出しています。<br/>
これはslackでの発言と反応をまとめたyamlファイルです。<br/>
発言にひっかけたい文字列をキーに、反応を配列形式で設定します。<br/>
こんな感じです。</p>

<pre><code class="yaml">お願いします:
  - こちらこそよろしく頼む
  - えーっ、やだよ
よろしいでしょうか: &amp;yoro
  - 許さん
  - 金による

いいですか:
  *yoro
</code></pre>

<p>では<code>fresh</code>起動しましょう。<br/>
testチャンネルでつぶやいてみます。</p>

<p><img src="/images/blog/2015-09-04.png" alt="slackbot" /></p>

<p>おお、できました！<br/>
ゴルーチンとかチャネルとかまだあんまりよくわかってないので引き続き勉強していきたいと思います。</p>
]]></content>
    </entry>
    
</feed>
