<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: linux | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/linux/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2016-05-10T19:54:04+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[tail -fをDBの特定のテーブルに対して行う方法]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2012/02/02/20120202115905/"/>
        <updated>2012-02-02T11:59:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2012/02/02/20120202115905</id>
        <content type="html"><![CDATA[<p>風です。tail -f風。</p>

<p>前にwatchコマンドについて書いた。</p>

<p><a href="http://d.hatena.ne.jp/gogo_sakura/20120131/1327978457">watchコマンド  ~ログとかファイル監視する時とかは何も考えずにtail -f
ファイル名としちゃう人へ</a></p>

<p>の追記的なもの。</p>

<p>開発中ってマスタ系のテーブルは空にしないけど、トランザクション系のテーブルはテスト前に空にすることが多い。</p>

<p>んでデータ登録する作業する度に、なんていうのか知らんけど。SQLブラウザ?(common
sqlとか SI Object Browserとか)っていうんでしょうか<br/>
で、select文書いておいて一々executeボタンを押す。</p>

<p>このexecuteが対した手間じゃないけど、毎回押すとめんどいし、意外に時間もかかる。</p>

<p>そこでこの間紹介したwatchで2秒起きにselectしちゃえばいいよねってお話。<br/>
しかも変更部分ハイライトすれば、追加したレコードも一目瞭然。</p>

<pre><code class="ruby">watch -d=cumulative 'mysql -u root --password=  db_name -e "select * from XXX_table;"'
</code></pre>

<p>で、どうでしょうか。<br/>
難点は差分ハイライト表示している時に、desc指定すると差分拾えないこと。</p>

<p>だいたい自分は１０秒起きに、毎回差分拾ってます。</p>

<pre><code class="ruby">watch -d -n 10 'mysql -u root --password=  db_name -e "select * from XXX_table;"'
</code></pre>

<p>ちなみに今モデル監視してログ作成する処理書いているんだけど。<br/>
登録作業していないのに、意図しないタイミングでレコードが増えていることがあって、そういう場合にも一定間隔でselect投げるようになるので<br/>
ウィンドウ並べて操作していれば、すぐに察知できる。</p>

<p>ちなみにrailsでモデルのログ機能作るのであれば<br/>
<a href="https://github.com/collectiveidea/acts_as_audited">acts  <em>as  </em>audited</a></p>

<p>つかうといいよ。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[watchコマンド~ログとかファイル監視する時とかは何も考えずにtail -f ファイル名としちゃう人へ]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2012/01/31/20120131115417/"/>
        <updated>2012-01-31T11:54:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2012/01/31/20120131115417</id>
        <content type="html"><![CDATA[<p>ログとかファイル監視する時とかは何も考えずに</p>

<pre><code>tail -f debugger.txt
</code></pre>

<p>とかってしちゃう人いると思うんですが。</p>

<p>表示する内容が少ない場合なら、watchってのがある。</p>

<pre><code>watch cat debugger.txt
</code></pre>

<p>でデフォルトの２秒起きにcat
debugger.txtが実行されます(表示は画面に収まるまで)</p>

<p>秒数変えたければ(下記例は60秒)</p>

<pre><code>watch -n 60 cat debugger.txt
</code></pre>

<p>コマンドに-dをつければ変更箇所を毎回ハイライトしてくれる。</p>

<pre><code>watch -d cat debugger.txt
</code></pre>

<p>cumulativeを指定すれば、watchし始めてからの変更をハイライトしてくれる。</p>

<pre><code>watch -d=cumulative cat test.txt
</code></pre>

<p>もちろんコマンドも可能</p>

<pre><code>watch -d ls -la
</code></pre>

<p>ロックファイルとか、ファイルが作成されたことの確認したい時とかに便利かもしれません。</p>

<p>開発中にログファイルに特定の文言が出たか知りたい場合とかにも便利。<br/>
例えば「error」と「fatal」がログに出た場合に、watch使えばすぐ気づける。</p>

<pre><code>watch grep -n -e error -e fatal app.log
</code></pre>

<p>ってやると行番号付きでerrorかfatalが発生したことがわかる。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[コマンドの繋ぎ方]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2012/01/30/20120130121056/"/>
        <updated>2012-01-30T12:10:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2012/01/30/20120130121056</id>
        <content type="html"><![CDATA[<p>コマンドの繋ぎ方は</p>

<p>パイプ(|)とかファイルに書き込むリダイレクション(  > もしくは   >  >
もしくは   &lt;)が有名ですが。</p>

<pre><code>ps aux | grep postfix
</code></pre>

<p>他にもあるんですね。</p>

<p>下の例のコマンド自体は意味のないコマンドですが。</p>

<pre><code>1 cd /var/www/app/log/ ; scp app.log 192.168.X.XX:/home/user
2 cd /var/www/app/log/ &amp;&amp; scp app.log 192.168.X.XX:/home/user
3 cd /var/www/app/log/ || scp app.log 192.168.X.XX:/home/user
</code></pre>

<p>1がコマンドを実行した後に次のコマンドを実行する方法。<br/>
2が移動に成功した場合のみ次のコマンドを実行する方法。<br/>
3が移動に失敗した場合のみ次のコマンドを実行する方法。</p>

<p>cronで指定するコマンドや、postfixのエイリアスで標準入力にメールの内容渡してプログラムを起動する際に使ったり。</p>

<p>例えばrailsのスクリプトランナー使いたい場合に。</p>

<pre><code>cd rails appのルートディレクトリ ; rails runner "Calender.generated" RAILS_ENV=production
</code></pre>

<p>ルートに移動してからスクリプトランナー起動。<br/>
とか。</p>
]]></content>
    </entry>
    
</feed>
