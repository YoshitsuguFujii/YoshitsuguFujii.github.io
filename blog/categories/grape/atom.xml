<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: grape | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/grape/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2019-06-28T20:34:35+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[grape-jbuilderでtimezoneをなんとかする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/06/29/grape-jbuilder-timezone/"/>
        <updated>2018-06-29T15:47:34+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/06/29/grape-jbuilder-timezone</id>
        <content type="html"><![CDATA[<p>Grapeでtimezoneを考慮して日付を返す場合は<br/>
この<a href="https://t.co/Fqt42F1M3H">What is the best way to emulate <code>around_filter</code> when using Grape?</a>のようにgrapeのbeforeとafterを使って設定するのが定石な気がしますが。<br/>
<a href="https://github.com/milkcocoa/grape-jbuilder">grape-jbuilder</a>でjbuilderの中で書いた日付がbeforeで設定したtimezoneで表示してくれなかったので対応しました。</p>

<!-- more -->




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7039502723411845"
     data-ad-slot="8206045005"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<p>grapeのendpoint(controllerでいうactionみたいな)で返すとtimezoneが考慮されていますが、jbuilderの中では考慮されていないっぽい。<br/>
before -> grapeのendpointの処理 -> after -> jbuilderのrender<br/>
という順番で動いているからですね。</p>

<p>苦しいですがrenderの前後にtimezoneを変更するpatchをあてます。</p>

<pre><code class="ruby"># config/initializers/grape_jbuilder_patch.rb
module GrapeJbuilderPatch
  def call
    Time.zone = endpoint.current_user.time_zone # ユーザーのtimezoneを使う
    result = super
    Time.zone = Rails.configuration.time_zone # 戻す
    result
  end
end

module Grape
  module Formatter
    class Jbuilder
      prepend GrapeJbuilderPatch
    end
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Grapeでskip_before_action]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/04/24/grape-skip-filter/"/>
        <updated>2018-04-24T14:10:09+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/04/24/grape-skip-filter</id>
        <content type="html"><![CDATA[<p>Deviseとか使っていて、ApplicationControllerに認証の仕組みを設ける時。</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  before_action :authenticate_user!
end
</code></pre>

<p>こう書きますね。<br/>
ログイン前のページではログイン判定は不要なのでskip_before_actionでskipさせるのが定石だと思います</p>

<pre><code class="ruby">class HogeController &lt;  ActionController::Base
  skip_before_action :authenticate_user!
end
</code></pre>

<p>Grapeではどうやんのよっていう話し。</p>

<!-- more -->    




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>route.settingsを使うといいです</p>

<pre><code class="ruby">module API::V1
  class Root &lt; Grape::API
    before do
      user_authenticate! unless route.settings[:skip_user_authenticate]
    end

    mount Users
  end
end
</code></pre>

<pre><code class="ruby">module API::V1
  class Users &lt; Grape::API
    resource 'users' do
      route_setting :skip_user_authenticate, true
      get do
        # do something
      end
    end
  end
end
</code></pre>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[GrapeでCSRF対策]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2018/02/26/csrf-with-grape/"/>
        <updated>2018-02-26T17:38:51+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2018/02/26/csrf-with-grape</id>
        <content type="html"><![CDATA[<p>セキュリティ試験を受けたらapiでpostしている箇所がcsrf違反でレポートが上がってきました。<br/>
apiでcsrfって必要なの？<br/>
って感じでしたが実際にレポートあがってきてしまっているしよくよく考えたら必要じゃんってなったので実装します。</p>

<p>ググってみると情報が少ないですね。<br/>
みなさんgrapeでcsrfどうしているんでしょう。</p>

<!-- more -->    




<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p>  <br/>
<ins class="adsbygoogle"  
     style="display:block; text-align:center;"  
     data-ad-layout="in-article"  
     data-ad-format="fluid"  
     data-ad-client="ca-pub-7039502723411845"  
     data-ad-slot="8206045005"></ins></p>

<script>    
     (adsbygoogle = window.adsbygoogle || []).push({});    
</script>


<p></p>

<p>gistでサンプル見つけましたが、<br/>
<a href="https://gist.github.com/jandudulski/f3799ca67b7b08ded0c6">jandudulski/auth.rb</a><br/>
Rails5.1.4では動きません。</p>

<p><a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/request_forgery_protection.rb">actionpackのcsrfの実装</a><br/>
をみながら実装してみます。</p>

<p>結果としてはこんな感じになりました。</p>

<pre><code class="ruby">module V1
  module RequestForgeryProtectionHelper
    def session
      env['rack.session']
    end

    def protect_against_forgery
      unless verified_request?
        Rails.logger.error("[API] Can't verify CSRF token authenticity.")
        error!(
          {
            result: 401,
            status: 'error',
            type: 'csrf_error',
            message: "Can't verify CSRF token authenticity."
          }, 401
        )
      end
    end

    def verified_request?
      !protect_against_forgery? || request.get? || request.head? ||
        authenticity_token_valid?
    end

    def authenticity_token_valid?
      encoded_masked_token = request.headers['X-CSRF-Token'] || request.headers['X-Csrf-Token']
      return false if encoded_masked_token.blank?
      masked_token = Base64.strict_decode64(encoded_masked_token)

      anonymous_controller = ApplicationController.new
      if masked_token.length == ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH
        anonymous_controller.send(:compare_with_real_token, masked_token, session)
      elsif masked_token.length == ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH * 2
        csrf_token = anonymous_controller.send(:unmask_token, masked_token)

        anonymous_controller.send(:compare_with_real_token, csrf_token, session)
      else
        false # Token is malformed.
      end
    end

    def protect_against_forgery?
      allow_forgery_protection = Rails.configuration.action_controller.allow_forgery_protection
      allow_forgery_protection.nil? || allow_forgery_protection
    end
  end
end
</code></pre>

<pre><code class="ruby">module V1
  class Root &lt; Grape::API
    helpers RequestForgeryProtectionHelper

    before do
      protect_against_forgery
    end
  end
end
</code></pre>

<p>クライアント側</p>

<pre><code class="javascript">var token = $( 'meta[name="csrf-token"]' ).attr( 'content' );
$.ajaxSetup({
  beforeSend: function ( xhr ) {
    xhr.setRequestHeader( 'X-CSRF-Token', token );
  }
});
</code></pre>
]]></content>
    </entry>
    
</feed>
