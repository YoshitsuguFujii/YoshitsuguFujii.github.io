<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Category: verp | なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/blog/categories/verp/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2017-10-23T12:30:14+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
      </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[強引にGoのメールでverpに対応する]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2016/08/24/golang-mail-with-verp/"/>
        <updated>2016-08-24T18:19:24+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2016/08/24/golang-mail-with-verp</id>
        <content type="html"><![CDATA[<p>Golangで<a href="http://www.postfix-jp.info/trans-2.2/jhtml/VERP_README.html">VERP</a>対応したくて色々と調べましたが<br/>
強引にやる方法しか思いつかなかったけどせっかく調べたので記録する。<br/>
ソースはこちらを参考にさせていただきました(感謝)<br/>
<a href="http://d.hatena.ne.jp/taknb2nch/20140213/1392277157">Golang Cafe #16 まとめ その2 smtpパッケージ</a></p>

<p>verpって単一の宛先のみでカンマ区切りだったりccだったりbccだったりは対応できないっぽいです。<br/>
送るなら1メール1ユーザにしないとダメ？</p>

<!-- more -->


<h2>postfix設定</h2>

<p>main.cf
/etc/postfix/main.cf</p>

<pre><code>recipient_delimiter = +
default_verp_delimiters = -=
smtpd_authorized_verp_clients = $mynetworks
</code></pre>

<p>以下sendMailはsmtp.SendMailと引数を一緒にしています。</p>

<pre><code>func sendMail(addr string, auth smtp.Auth, from string, to []string, msg []byte) error {
    var client *smtp.Client
    var err error

    if client, err = smtp.Dial(addr); err != nil {
        fmt.Fprintf(os.Stderr, "Error: %v\n", err)
        os.Exit(1)
    }

    defer client.Close()

    if err = client.Hello("localhost"); err != nil {
        fmt.Fprintf(os.Stderr, "Error: %v\n", err)
        os.Exit(1)
    }

    if auth != nil {
        if err = client.Auth(auth); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }
    }

    for _, addr := range to {
        if err = client.Reset(); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }

        if err = mail(client, from); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }

        if err = client.Rcpt(addr); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }

        var w io.WriteCloser

        if w, err = client.Data(); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }

        if _, err = w.Write([]byte(msg)); err != nil {
            fmt.Fprintf(os.Stderr, "Error: %v\n", err)
            os.Exit(1)
        }

        w.Close()
    }

    if err = client.Quit(); err != nil {
        fmt.Fprintf(os.Stderr, "Error: %v\n", err)
        os.Exit(1)
    }

    return nil
}

func mail(c *smtp.Client, from string) error {
    cmdStr := "MAIL FROM:&lt;%s&gt; XVERP"

    // 8BITMIMEは考慮しない

    _, _, err := cmd(c, 250, cmdStr, from)
    return err
}

func cmd(c *smtp.Client, expectCode int, format string, args ...interface{}) (int, string, error) {
    id, err := c.Text.Cmd(format, args...)
    if err != nil {
        return 0, "", err
    }
    c.Text.StartResponse(id)
    defer c.Text.EndResponse(id)
    code, msg, err := c.Text.ReadResponse(expectCode)
    return code, msg, err
}
</code></pre>
]]></content>
    </entry>
    
</feed>
