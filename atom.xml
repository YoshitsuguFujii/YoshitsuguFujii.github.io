<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[なんとなく日々徒然と]]></title>
    <link href="http://yoshitsugufujii.github.io/atom.xml" rel="self"/>
    <link href="http://yoshitsugufujii.github.io/"/>
    <updated>2015-06-10T12:38:26+09:00</updated>
    <id>http://yoshitsugufujii.github.io/</id>
    <author>
        <name><![CDATA[Yoshitsugu Fujii]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[railsでuser_idをurlに付与して引き回す方法]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/06/10/append-user-id-to-url/"/>
        <updated>2015-06-10T12:01:49+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/06/10/append-user-id-to-url</id>
        <content type="html"><![CDATA[<p>特定のパラメータを常にurlに付与する方法です。</p>

<p>urlにuser_idをクエリなどにふくめておくとgoogle analyticsとか使った時に、特定のユーザがどういうページにアクセスしたかわかりユーザの行動分析に使えたりします。</p>

<p>なのでurlに自動でuser_id=[:user_id]の形式でアクセスしてるページのuser_idが付与されると非常に便利そうです。</p>

<p>参考になったのはjpmobileのソースでした(docomo端末の場合にguidを自動付与したりしています)<br/>
<a href="https://github.com/jpmobile/jpmobile/blob/master/lib/jpmobile/docomo_guid.rb">docomo_guid.rb</a></p>

<!-- more -->


<p>こうすれば自動でユーザーIDが設定されます。</p>

<figure class='code'><figcaption><span>app/controller/application_controller.rb </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_url_options</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="k">super</span> <span class="o">||</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでログインしていれば(上記だとcurrent_userが取れれば)<br/>
<a href="http://localhost:3000/?user_id=6">http://localhost:3000/?user_id=6</a><br/>
みたいに付与されるはずです。</p>

<p>今やっている案件でこの処理が必要になったので思い出しながら書いてみましたが、以前これを利用して遷移前の履歴をurlに保持するgemを作ったことをふと思いだしました。<br/>
<a href="https://github.com/YoshitsuguFujii/light_stalking">light_stalking</a></p>

<p>このGEMは思いつきで作って実際に使ってないので色々と問題ありそうですが、default_url_optionsを使うことでurlの最大長にひっかからない範囲で色々なことができそうという一例になるんじゃないかと思いました。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Deviseで特定の条件のみパスワードの検証をスキップする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/06/08/devise-skip-password-check/"/>
        <updated>2015-06-08T12:35:01+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/06/08/devise-skip-password-check</id>
        <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#開発環境  </span>
</span><span class='line'><span class="n">rails</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="n">devise</span> <span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>deviseを使っていて、ユーザモデルに仮登録状態を作りたいと思います。<br/>
仮登録の段階ではパスワードはまだ要求されず。<br/>
最後の最後でパスワードを設定して本会員登録完了といったフローです。</p>

<p>deviseでは対象モデルに<code>devise :validatable</code>に設定している場合はメールアドレスやパスワードの検証が走ります。<br/>
今回はパスワード以外のチェックはやってほしいため<code>:validatable</code>の宣言を外すだけではダメです。</p>

<!-- more -->


<p>deviseの以下のソースを見てみます</p>

<figure class='code'><figcaption><span>lib/devise/models/validatable.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>  <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="n">assert_validations_api!</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">validates_presence_of</span>   <span class="ss">:email</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:email_required?</span>
</span><span class='line'>    <span class="n">validates_uniqueness_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">allow_blank</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:email_changed?</span>
</span><span class='line'>    <span class="n">validates_format_of</span>     <span class="ss">:email</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">email_regexp</span><span class="p">,</span> <span class="ss">allow_blank</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:email_changed?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">validates_presence_of</span>     <span class="ss">:password</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:password_required?</span>
</span><span class='line'>    <span class="n">validates_confirmation_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:password_required?</span>
</span><span class='line'>    <span class="n">validates_length_of</span>       <span class="ss">:password</span><span class="p">,</span> <span class="ss">within</span><span class="p">:</span> <span class="n">password_length</span><span class="p">,</span> <span class="ss">allow_blank</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>パスワードの検証をするかどうかはpassword_required?で判定しています。
判定メソッドはこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">password_required?</span>
</span><span class='line'>  <span class="o">!</span><span class="n">persisted?</span> <span class="o">||</span> <span class="o">!</span><span class="n">password</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">password_confirmation</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを対象のモデルでオーバーライドします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">password_required?</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">member?</span>
</span><span class='line'>      <span class="o">!</span><span class="n">persisted?</span> <span class="o">||</span> <span class="o">!</span><span class="n">password</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="o">!</span><span class="n">password_confirmation</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでmember?がtrueを返さない(本登録前のユーザ)はパスワードの検証処理をスキップできるようになります。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[deep_rejectが欲しくてrefinementsで実装しようとした話]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/05/26/deep-reject/"/>
        <updated>2015-05-26T19:03:54+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/05/26/deep-reject</id>
        <content type="html"><![CDATA[<p>再帰的に条件判定を行うrejectが欲しくなりました。<br/>
こういう動きです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">].</span><span class="n">deep_reject</span><span class="p">{</span><span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">}</span>  <span class="c1"># =&gt; [2]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]].</span><span class="n">deep_reject</span><span class="p">{</span><span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># =&gt; [2, [2, 3]]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="s2">&quot;b&quot;</span> <span class="p">}</span><span class="o">].</span><span class="n">deep_reject</span><span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:a</span> <span class="p">}</span> <span class="c1"># =&gt; [1, 2, {:b=&gt;&quot;b&quot;}]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="s2">&quot;d&quot;</span><span class="p">}</span> <span class="p">}</span><span class="o">].</span><span class="n">deep_reject</span><span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:a</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, {:b=&gt;&quot;b&quot;, :c=&gt;{:c=&gt;&quot;d&quot;}}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>かなり便利そうです。</p>

<!-- more -->


<p>refinmetsで実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">HashEx</span>
</span><span class='line'>    <span class="n">refine</span> <span class="no">Hash</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">),</span> <span class="n">result</span><span class="o">|</span>
</span><span class='line'>          <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>              <span class="n">result</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>              <span class="n">result</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ArrayEx</span>
</span><span class='line'>    <span class="n">refine</span> <span class="nb">Array</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">result</span><span class="o">|</span>
</span><span class='line'>          <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="c1"># 呼べない！</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ですがこれを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">using</span> <span class="no">ArrayEx</span>
</span><span class='line'><span class="n">using</span> <span class="no">HashEx</span>
</span></code></pre></td></tr></table></div></figure>


<p>と読み込んで使おうとしたところ残念ながら配列の中にハッシュが紛れ込んでいるようなケースだとArrayExのdeep_rejectからHashExのdeep_rejectが参照できず思った通りの結果になりませんでした。<br/>
refinementsはかなり厳密なスコープで動くようです。</p>

<p>まぁあったら有意義なメソッドだしいいかということで結局オープンクラスで実装しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">result</span><span class="o">|</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">v</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">),</span> <span class="n">result</span><span class="o">|</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>          <span class="n">result</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>          <span class="n">result</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">deep_reject</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">result</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[モデルのattributeに変更がなくてもnested_attribute_forを使っているモデルでcallbackを発生させる]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/05/25/force-occur-callbacks/"/>
        <updated>2015-05-25T16:15:38+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/05/25/force-occur-callbacks</id>
        <content type="html"><![CDATA[<p>任意の条件でnested_attribute_forの対象の保存処理を走らせる方法です</p>

<p>ファイルのアップロード用のモデルを作っていて<code>ActionDispatch::Http::UploadedFile</code>を一旦attr_accessorのアクセサで受けたあとcallbackでファイル名やファイルサイズをmodelクラスの該当のカラムに設定するという処理を書いておりました。</p>

<p>ファイルは可変にアップロードしたかったのでこのモデルの親モデルから参照するようにして、nested_attribute_forで親モデル更新時に一緒に更新するようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Oya</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:files</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:files</span><span class="p">,</span> <span class="ss">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">File</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:file</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>いらない情報ですが、一応モデルクラスFileモデルの参照先のテーブルfilesテーブルはこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="sb">`id`</span> <span class="n">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="no">NOT</span> <span class="no">NULL</span> <span class="no">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`created_at`</span> <span class="n">datetime</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`updated_at`</span> <span class="n">datetime</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`oya_id`</span> <span class="n">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="no">NOT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`data_file_name`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`data_content_type`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="sb">`data_file_size`</span> <span class="n">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>新規登録の時は良かったんですが、親モデル保存時にnested_attribute_forの対象のモデルクラスのsave(auto_save)やcallbackを走らせるかどうかは実際にデータベースに登録されているカラムの値に変化があったかで決定されているようです(たぶん)</p>

<p>そのため変更時にはformからはfileというアクセサに設定する値のみ飛んでくるような作りだとauto_saveが動かずFileクラスの更新処理が走りませんでした。</p>

<p>そのためchanged_for_autosave?をオーバーライドすることで独自に変更判定を行いcallback並びにauto saveが動くようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">File</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:file</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">changed_for_autosave?</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>知ってると簡単ですが、知らないとはまりますね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[nested_formで下じゃなくて上に要素を追加したい場合]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/05/20/nested-form-add-field-to-top/"/>
        <updated>2015-05-20T18:03:26+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/05/20/nested-form-add-field-to-top</id>
        <content type="html"><![CDATA[<p>neste_formは可変なサイズの子要素を動的に追加できるGemです。</p>

<p><a href="https://github.com/ryanb/nested_for://github.com/ryanb/nested_form">nested form</a></p>

<p>いつも大変お世話になっておりますが、今回の案件で追加する先を指定したエレメントの下ではなく上に追加しなければいけなくなり対応しました。</p>

<!-- more -->


<p>バージョンは</p>

<figure class='code'><figcaption><span>Gemfile.lock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nested_form</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>での作業となります。</p>

<p>ますnested_formで使われるjsを眺めるとそんなに長くない処理であることがわかります。<br/>
その中で追加ボタンを押したときに要素を追加する部分はこの辺りになるようです。</p>

<figure class='code'><figcaption><span>jquery_nested_form:55行目あたり</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">insertFields</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="nx">assoc</span><span class="p">,</span> <span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">content</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">content</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">link</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここを上書きします。 <br/>
application.jsで<code>//= require jquery_nested_form</code>の後に以下の処理を書いて上書きしちゃいましよう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">NestedFormEvents</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">insertFields</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="nx">assoc</span><span class="p">,</span> <span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;destination&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;prepend&quot;</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">content</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">content</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">content</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">link</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>linkのdata-destination=prependで対象の要素の上にprependで追加されるイメージです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;table id=&quot;tasks&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">fields_for</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">:wrapper</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">task_form</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;tr class=&quot;fields&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">task_form</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">      &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">task_form</span><span class="o">.</span><span class="n">link_to_remove</span> <span class="s2">&quot;Remove this task&quot;</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">    &lt;/tr&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/table&gt;</span>
</span><span class='line'><span class="x">&lt;p&gt;</span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">link_to_add</span> <span class="s2">&quot;Add a task&quot;</span><span class="p">,</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:target</span> <span class="o">=&gt;</span> <span class="s2">&quot;#tasks&quot;</span><span class="p">,</span> <span class="ss">:prepend</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単でした。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Rails Engineを使った開発]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/05/19/develop-with-rails-engine/"/>
        <updated>2015-05-19T13:09:58+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/05/19/develop-with-rails-engine</id>
        <content type="html"><![CDATA[<p>一つ前に携わったプロジェクトではサブシステムがたくさんあり、それぞれがrailsで構築されていて共通処理やmodelはrails engineにあつめられ各システムで参照しておりました。</p>

<p>今までgemのコードリーディングをする時にしか意識していなかったrails engineですが(deviseとかとか)、結構便利だということを今更ながら実感し、最近は共有処理をengineに書き出してそれを参照するようにしています。</p>

<p>クックパッドさんでも共通部分をengineに集めているようです。<br/>
<a href="http://techlife.cookpad.com/entry/2015/04/06/155940">新規サービスの管理画面を短期間で見栄え良く実装する</a></p>

<p>ドリコムさんでは複数のengineを組み合わせてシステムを作っているようです。<br/>
<a href="http://blog.onk.ninja/2014/12/02/mountable_engine.html">Mountable Engine だらけの Rails アプリ開発</a></p>

<!-- more -->


<p>でも完全に共通に作ろうとすると色々考えなきゃいけないから工数がかかっちゃうんじゃないかと懸念があるかもしれません。<br/>
でも最初はそこまで共通化する必要もないのではないのかと思います。</p>

<p>git使っていれば、システムの納品段階でengineのブランチを切るなりタグを打つなりして機能を固定してしまえばいいのです。<br/>
そうすれば、今後engineに修正が加わってもGemfileで該当のブランチまたはタグを見るようにすれば問題なく納品段階のengineのコードでシステムは動き続けます。<br/>
その後時間をおいてゆっくりとプロジェクトに依存したコードを共通化していけばいいのです。</p>

<p>これを応用してめったにやらない処理であんまり入れなたくないような機能や、<br/>
モンキーパッチなども参照元のプロジェクト単位でengineをカスタマイズして導入することもできます。</p>

<p>そして共通化した処理を書くことはいつもより有益なことをしてる気持ちで仕事ができるので楽しいです。<br/>
engine固有の仕組みや書き方もあって最初は中々辛い部分もありますが、
engineを使ったことのない方は決まり切った処理をコピぺで過去のプロジェクトから持ってくるのではなく、
その処理をengineに書き出してそれをプロジェクトから参照してみてはいかがでしょうか？</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Railsでbootstrap datetimepickerを日本語化しつつ導入(with rails assets)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/04/22/bootstrap-datetimepicker/"/>
        <updated>2015-04-22T21:52:21+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/04/22/bootstrap-datetimepicker</id>
        <content type="html"><![CDATA[<p>普段はよく<a href="https://github.com/eternicode/bootstrap-datepicker">bootstrap-datepicker</a>を使うのですが、
今回の案件では時刻まで絞り込みたいというお話だったのでdatetimepickerを導入してみました。</p>

<p>こちらを使います。かなり高機能な上に日本語化まで対応できる優れもの。<br/>
<a href="http://eonasdan.github.io/bootstrap-datetimepicker/">Eonasdan/bootstrap-datetimepicker</a></p>

<p>デモを見るだけでもワクワクしますね。<br/>
<a href="http://eonasdan.github.io/bootstrap-datetimepicker/Installing/">入れ方</a>もたくさん用意されていていいですね。<br/>
今回もrails-assetsで導入します。</p>

<!-- more -->




<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-bootstrap-sass-official&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-eonasdan-bootstrap-datetimepicker&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>bundle install</code>したら次はapp/assets/javascripts/application.jsに以下を記述。<br/>
日本語化する場合はmomentも一緒にいれます。</p>

<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//= require bootstrap-sass-official</span>
</span><span class='line'><span class="c1">//= require moment</span>
</span><span class='line'><span class="c1">//= require moment/locale/ja</span>
</span><span class='line'><span class="c1">//= require eonasdan-bootstrap-datetimepicker</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後にcssの読み込み</p>

<figure class='code'><figcaption><span>app/assets/stylesheets/application.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap-sass-official&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;eonasdan-bootstrap-datetimepicker&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで設定は終了です。<br/>
あとはhtmlで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;datetimepicker form-control&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやって</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.datetimepicker&quot;</span><span class="p">).</span><span class="nx">datetimepicker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;YYYY/MM/DD HH:mm&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showClear</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showClose</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">locale</span><span class="o">:</span> <span class="s1">&#39;ja&#39;</span>
</span><span class='line'>   <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやると日本語かされた時刻も選択可能なカレンダーがいい感じに表示されるはずです。</p>

<h3>2014/04/25追記</h3>

<p>ちなみに書式設定をいじれば時刻選択なしの日付のみのdatepickerとしても使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.datepicker&quot;</span><span class="p">).</span><span class="nx">datetimepicker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;YYYY/MM/DD&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showClear</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showClose</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">locale</span><span class="o">:</span> <span class="s1">&#39;ja&#39;</span>
</span><span class='line'>   <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>非常にいいですね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[pecoでctrl+jとctrl+kで上下移動]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/04/20/peco-selectup-selectdown/"/>
        <updated>2015-04-20T19:31:45+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/04/20/peco-selectup-selectdown</id>
        <content type="html"><![CDATA[<p>pecoをランチャーとして使っているのですが、<br/>
メニューを呼び出した後ホームポジションから手を離して矢印キーに指を運ぶのが嫌でctrl+jとctrl+kで移動できないかと思っていたら会社の人にやり方を教えてもらいできました。</p>

<p>具体的にはpecoの<a href="https://github.com/peco/peco#keymaps">キーマップ</a>を使います</p>

<!-- more -->


<p>keymap設定用にconfig.jsonを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/
</span><span class='line'>mkdir .peco
</span><span class='line'>vim ~/.peco/config.json
</span></code></pre></td></tr></table></div></figure>


<p>以下の内容で保存します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Keymap&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;C-j&quot;</span><span class="p">:</span> <span class="s2">&quot;peco.SelectDown&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;C-k&quot;</span><span class="p">:</span> <span class="s2">&quot;peco.SelectUp&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでctrl+jで下に、ctrl+kで上に移動するようになっているはずです。
簡単！</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Railsでbootswatch導入(with rails assets)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/04/16/bootswatch-with-rails-assets/"/>
        <updated>2015-04-16T11:01:57+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/04/16/bootswatch-with-rails-assets</id>
        <content type="html"><![CDATA[<p>管理画面を作るにあたって<a href="http://getbootstrap.com/">bootstrap</a>だけで1から作るのもしんどかったので、フリーのbootstrap用テンプレート<a href="https://bootswatch.com/">bootswatch</a>を使って管理画面を作ってみたいと思います。</p>

<p>導入には以下4パターンがあるかと思います。</p>

<ol>
<li><a href="https://github.com/maxim/bootswatch-rails">bootswatch-rails</a>などのGemを使う</li>
<li>bowerで入れる</li>
<li>rails-assetsで入れる</li>
<li>サイトからダウンロードしてassets下に配置する</li>
</ol>


<p>今回はrails-assetsで導入してみました。</p>

<!-- more -->


<p><a href="https://rails-assets.org/">Rails Assets</a>で検索するといくつか候補が出てきます。<br/>
今回はrails-assets-bootswatch-sassを使ってみます</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-bootstrap-sass-official&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-bootswatch-sass&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>そしてapplication.cssをapplication.css.scssにリネームして以下を追加です。</p>

<figure class='code'><figcaption><span>app/assets/stylesheets/application.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">$</span><span class="nt">icon-font-path</span><span class="o">:</span> <span class="s2">&quot;bootstrap-sass-official/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap-sass-official&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootswatch-sass/flatly/variables&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootswatch-sass/flatly/bootswatch&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootswatch-sass/flatly/bootstrap&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでサイトがbootswatchのテーマが適用された状態(今回はフラットデザインのflatlyを選びました)となります。
簡単ですね。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[RailsでIE8の対応(with rails assets)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/04/14/html5shiv-respond-with-slim/"/>
        <updated>2015-04-14T11:30:58+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/04/14/html5shiv-respond-with-slim</id>
        <content type="html"><![CDATA[<p>IE8も推奨ブラウザに含めるプロジェクトに関わることになったのでrails-assetsを使ってIE8に対応していきたいと思います。</p>

<p>やることとしては以下の感じですかね。</p>

<ul>
<li>jquery1.x系の導入(今回は1.9.1)</li>
<li>html5shiv.jsの導入</li>
<li>respond.jsの導入</li>
</ul>


<p>テンプレートエンジンはslimを使います。</p>

<!-- more -->


<p>まずはGemfile</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Slim</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;slim-rails&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rails-assets.org&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-jquery&#39;</span><span class="p">,</span> <span class="s2">&quot;1.9.1&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># for ie8</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-html5shiv&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-assets-respond&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>bundle install</code>したらconfig/initializers/assets.rbに以下を追記</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w(html5shiv.js respond.js)</span>
</span></code></pre></td></tr></table></div></figure>


<p>そしてapp/views/layouts/application.html.slimで読み込みます。</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">/</span><span class="cs">[if lt IE 9]</span><span class="c"></span>
</span><span class='line'>  <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;html5shiv&quot;</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;respond&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>app/assets/javascripts/application.js</code>でjqueryを読み込みます</p>

<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//= require jquery</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上でhtml5shiv.jsとrespond.js、そしてIE8に対応しているjquery1.x版の導入がrails-assetsにて完了です。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[同一のselectボックスを複数設置した場合に、選択された項目を他のプルダウンから削除するjs]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/24/select-narrowing-down/"/>
        <updated>2015-03-24T14:39:06+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/24/select-narrowing-down</id>
        <content type="html"><![CDATA[<p>作成したのはだいぶ前ですが、先日昔お世話になった人からselect-narrowing-downを使いたいんだけどという有難い言葉をいただき、そういえば作ったなぁと思い見返してみました。</p>

<p>デモはこんな感じです。</p>

<!-- more -->




<script src="https://rawgit.com/YoshitsuguFujii/select-narrowing-down.js/master/src/jquery-1.8.3.min.js"></script>


<script src="https://rawgit.com/YoshitsuguFujii/select-narrowing-down.js/master/src/select-narrowing-down.js"></script>


<script type="text/javascript">
  $(function(){
      $("#narrowing_down").bind("selectNarrowingDown", function(){
      var selected_index = $('this').context.activeElement.selectedIndex;
      var selected_text = $('this').context.activeElement[selected_index].text;
      alert(selected_text + "が選択されました");
    })
  });
</script>


<p><strong>select-narrowing-down.jsのデモ</strong></p>

<p>結婚相手に求めるものを３つ選んでください</p>

<div id="narrowing_down">
  <select>
    <option value="">&#8211;</option>
    <option value="1">お金</option>
    <option value="2">年齢</option>
    <option value="3">容姿</option>
    <option value="4">相性</option>
    <option value="5">性格</option>
  </select>

  <select>
    <option value="">&#8211;</option>
    <option value="1">お金</option>
    <option value="2">年齢</option>
    <option value="3">容姿</option>
    <option value="4">相性</option>
    <option value="5">性格</option>
  </select>

  <select>
    <option value="">&#8211;</option>
    <option value="1">お金</option>
    <option value="2">年齢</option>
    <option value="3">容姿</option>
    <option value="4">相性</option>
    <option value="5">性格</option>
  </select>
</div>


<p><br>
<br></p>

<p>プルダウンを選択した時に処理を入れれるように第2引数にfunctionを設定できます。<br/>
便利ですね！デモでは選択した内容をalert表示しています</p>

<p>チェックボックスじゃなくてどうしてもプルダウンでやりたい人はよかったら使ってみてください。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[今日 嫁にホワイトデーのお返しをしたよ]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/21/mouse-pad/"/>
        <updated>2015-03-21T12:16:35+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/21/mouse-pad</id>
        <content type="html"><![CDATA[<p>嫁のホワイトデーのお返しがようやく届きました。</p>

<p>かわいいマウスパッドというリクエストでしたが、探したけどかわいいマウスパッドがあまりなくどうしたものかと思ってましたが、
商品を自由にカスタマイズできる <a href="http://www.zazzle.co.jp">Zazzle</a>というサービスがとても良さそうだったのでこれを利用しました。</p>

<p>オーダーが3月9日。銀行振込も同日に行いました。<br/>
振込確認したので作りますメールが12日にきて、13日に発送しますメールがきました。<br/>
アメリカからの発送なので少し日数がたった3月16日に家に届きました。<br/>
でも実際には仕事で受け取れず、受け取ったのは今日です(^^;)</p>

<p>こんな感じのマウスパッドが届きました！
素晴らしい出来！</p>

<p><img src="http://yoshitsugufujii.github.io/images/for_post/20150321_011205565_iOS.jpg"></p>

<p>何か記念品を贈りたくなったらまた利用しようと思います。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[重複している画像ファイルを削除(rubyで)]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/20/delete-duplicated-file/"/>
        <updated>2015-03-20T17:27:16+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/20/delete-duplicated-file</id>
        <content type="html"><![CDATA[<p>重複しているファイルを削除します。</p>

<figure class='code'><figcaption><span>delete_duplicate_file.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest/md5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_hash</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">file</span><span class="o">|</span>
</span><span class='line'>              <span class="nb">hash</span><span class="o">[</span><span class="n">file</span><span class="o">]</span> <span class="o">=</span> <span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>              <span class="nb">hash</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">duplicated_md5</span> <span class="o">=</span> <span class="n">file_hash</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file_count</span><span class="p">,</span> <span class="n">md5</span><span class="o">|</span>
</span><span class='line'>                   <span class="n">file_count</span><span class="o">[</span><span class="n">md5</span><span class="o">]</span> <span class="o">=</span> <span class="n">file_hash</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">md5</span><span class="p">)</span>
</span><span class='line'>                   <span class="n">file_count</span>
</span><span class='line'>                 <span class="k">end</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">md5</span><span class="p">,</span> <span class="n">count</span><span class="o">|</span>
</span><span class='line'>                   <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>                 <span class="k">end</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>
</span><span class='line'><span class="n">duplicated_md5</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file_md5</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># 削除ではなく重複したファイルを他のディレクトリに退避したい場合などはここを変えてください。</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">unlink</span> <span class="n">file_hash</span><span class="o">.</span><span class="n">invert</span><span class="o">[</span><span class="n">file_md5</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>使い方</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby delete_duplicate_file.rb ./*
</span></code></pre></td></tr></table></div></figure>


<p>引数でブロブ渡したら勝手に展開されて渡されてきたので、そのままプログラム内で参照しちゃったけどひょっとしたらzshだけかも(?)<br/>
もっとうまく書けるような気もするけど体力不足の今日の私の脳みそではこれが限界。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[ファイル内の特定の行の数値をインクリメントする]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/18/increment-in-file/"/>
        <updated>2015-03-18T12:00:03+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/18/increment-in-file</id>
        <content type="html"><![CDATA[<p>yamlファイルの特定の数字をインクリメントしたくてスクリプトを書きました。
データとしてはこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">data_one</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hoge</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">fuga</span>
</span><span class='line'><span class="l-Scalar-Plain">data_two</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">baa</span>
</span><span class='line'><span class="l-Scalar-Plain">data_three</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foofoo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">baabaa</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>これのcol_numをインクリメントします。
応用きくように正規表現でひっかかるようにしときましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\e</span><span class="s2">[31m</span><span class="si">#{</span><span class="s2">&quot;[!]引数が不正です。第一引数にはファイルパスを、第二引数には正規表現を指定してください&quot;</span><span class="si">}</span><span class="se">\e</span><span class="s2">[0m&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_name</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">regexp</span>    <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 念のためバックアップを取る</span>
</span><span class='line'><span class="sb">`cp </span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="sb"> </span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="sb">_bk`</span>
</span><span class='line'>
</span><span class='line'><span class="n">sequence</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">replaced_file_body</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="n">replaced_file_body</span> <span class="o">&lt;&lt;</span> <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span>  <span class="n">regexp</span>
</span><span class='line'>                            <span class="c1"># 初回のsequenceのはじまり取得</span>
</span><span class='line'>                            <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>                              <span class="n">sequence</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[^0-9]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>                              <span class="n">line</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                              <span class="c1"># sequenceをincrementしながら置換</span>
</span><span class='line'>                              <span class="n">line</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\d.*/</span><span class="p">,</span> <span class="p">(</span><span class="n">sequence</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">end</span>
</span><span class='line'>                          <span class="k">else</span>
</span><span class='line'>                            <span class="n">line</span>
</span><span class='line'>                          <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 変換した内容で書き換え</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="n">replaced_file_body</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方はこんな感じです</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby increment_number_in_file.rb official_document_archive.yml col_num
</span></code></pre></td></tr></table></div></figure>


<p>すると結果こうなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">data_one</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hoge</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">fuga</span>
</span><span class='line'><span class="l-Scalar-Plain">data_two</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">baa</span>
</span><span class='line'><span class="l-Scalar-Plain">data_three</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">col_num</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foofoo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">baabaa</span>
</span></code></pre></td></tr></table></div></figure>


<p>状況に応じて書き換えながらになると思いますが、よかったら使ってみてください。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[はじめて医療費控除を申告してみたよ]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/16/iryohi-koujo/"/>
        <updated>2015-03-16T21:07:30+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/16/iryohi-koujo</id>
        <content type="html"><![CDATA[<p>医療費控除。</p>

<p>薄々は知っていたけどそんなに病院にお金を使うこともなく、領収書と取っといたりするのも面倒なのであまり意識したことはなかったのですが、<br/>
去年はエクストルージョンという歯の処置を保険適用外(15万弱しました)でやったりとかなりお金を使ったので今回は医療費控除を請求してみることにしました。</p>

<p>郵送で申し込みます。</p>

<!-- more -->


<p></p>

<p><a href="https://www.keisan.nta.go.jp/h26/ta_top.htm#bsctrl">国税局</a>のシステムから入力していくと最終的にPDFができあがるのでこちらを印刷して郵送します。<br/>
医療費控除は特に難しいことはなく、ページを順次入力していったらすんなりできました。</p>

<p>ちなみに私は住宅減税で所得税は全額還付されており、住民税に充当される分が軽減されるとかよくわらかなかったので妻で申請することにしました。<br/>
個人個人ではなく同じ家に住む人をまとめて対象とできるので私のを合算した金額を妻が請求するといったことが可能なんですね。</p>

<p>ちなみに国税局のHP金額をうちこんでいくと最後に実際に還付される金額が画面上で表示されます。<br/>
去年は病院に172000円使いました。還付で6080円ほど戻ってくるようです。</p>

<p>入力大変でしたけど、ちょっとした小遣いと思えば大きいですね。<br/>
いったいいくら帰ってくるの？とか夫と妻どちらで申請したらいいの？<br/>
と悩んでいる方がいらっしゃったら実際にWEBから入力してみて、最後に表示される金額を見て決めてみたらいいんではないでしょうか？</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[関連先が存在していたら論理削除、関連先が存在していなかったら物理削除]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/13/real-delete-discreetly/"/>
        <updated>2015-03-13T22:21:31+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/13/real-delete-discreetly</id>
        <content type="html"><![CDATA[<p>という内容のものが業務で必要になり、処理を書きましたが勘違いでそんな仕様はどこにもなくお蔵入りになってしまって悔しいので
ここでさらします。</p>

<p>Gistではここに置いてあります。<br/>
<a href="https://gist.github.com/YoshitsuguFujii/e86d1f208a594ae4effa">real_delete_discreetly</a></p>

<!-- more -->


<p></p>

<p>本体です</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RealDeleteDiscreetly</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_discreetly</span>
</span><span class='line'>    <span class="n">relation_exist</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">confirm_relations</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">confirm_relation</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">destroyed_by_association</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">destroyed_by_association</span><span class="o">.</span><span class="n">active_record</span> <span class="o">==</span> <span class="n">confirm_relation</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span>
</span><span class='line'>          <span class="n">relation_exist</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">reflection</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">reflections</span><span class="o">[</span><span class="n">confirm_relation</span><span class="o">].</span><span class="n">presence</span>
</span><span class='line'>          <span class="n">send_method</span> <span class="o">=</span> <span class="k">case</span> <span class="n">reflection</span><span class="o">.</span><span class="n">macro</span>
</span><span class='line'>                    <span class="k">when</span> <span class="ss">:has_many</span>
</span><span class='line'>                      <span class="ss">:exists?</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                      <span class="ss">:present?</span>
</span><span class='line'>                    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="nb">send</span><span class="p">(</span><span class="n">confirm_relation</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send_method</span><span class="p">)</span>
</span><span class='line'>            <span class="n">relation_exist</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">confirm_relation</span><span class="si">}</span><span class="s2"> is not Reflection&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="n">relation_exist</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">delete_all!</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">real_delete_discreetly</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">class_attribute</span> <span class="ss">:confirm_relations</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">confirm_relations</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:confirm_relations</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">acts_as_paranoid</span> <span class="n">options</span>
</span><span class='line'>      <span class="n">after_destroy</span> <span class="ss">:delete_discreetly</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>論理削除部分はact_as_paranoidに依存しています。<br/>
このソースはlibなどのオートロードの対象となるディレクトリに置く想定です。</p>

<p>該当のモデルでreal_delete_discreetlyすると<br/>
関連先が存在していたら論理削除、関連先が存在していなかったら物理削除<br/>
という動きをするようになるはずです。</p>

<p>こんな書き方になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserProfile</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">real_delete_discreetly</span> <span class="ss">column</span><span class="p">:</span> <span class="ss">:del_flg</span><span class="p">,</span> <span class="ss">column_type</span><span class="p">:</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span> <span class="ss">confirm_relations</span><span class="p">:</span> <span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとuserが存在する場合は論理削除。<br/>
userレコードが存在しない場合は物理削除になります。<br/>
confirm_relations以外の値はacts_as_paranoidで渡すものと同じものが指定できます。<br/>
今回の例では論理削除のカラムをデフォルトのdeleted_atじゃなくてdelete_flagで見ている例ですね。</p>

<p>rspecも書くつもりだったので各モデルで使えるshared_exampleもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_examples_for</span> <span class="s1">&#39;real delete discreetly&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:base_instance</span><span class="p">)</span> <span class="p">{</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:base_instance</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:confirm_relations</span><span class="p">)</span> <span class="p">{</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:confirm_relations</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:paranoid_column</span><span class="p">)</span> <span class="p">{</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:paranoid_column</span><span class="o">]</span> <span class="o">||</span> <span class="ss">:delete_flag</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:paranoid_column_type</span><span class="p">)</span> <span class="p">{</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:paranoid_column_type</span><span class="o">]</span> <span class="o">||</span> <span class="ss">:boolean</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@model</span> <span class="o">=</span> <span class="n">base_instance</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>    <span class="vi">@model</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">paranoid_column_type</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:boolean</span>
</span><span class='line'>      <span class="vi">@from</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="vi">@to</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="no">Time</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@from</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="vi">@to</span> <span class="o">=</span> <span class="n">time</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;relation exists&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">confirm_relation</span> <span class="o">=</span> <span class="n">confirm_relations</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">case</span> <span class="vi">@model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">reflections</span><span class="o">[</span><span class="n">confirm_relation</span><span class="o">].</span><span class="n">macro</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:has_many</span>
</span><span class='line'>        <span class="vi">@model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">confirm_relation</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:build</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;build_</span><span class="si">#{</span><span class="n">confirm_relation</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;soft deleted&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span> <span class="vi">@model</span><span class="o">.</span><span class="n">destroy</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span> <span class="p">{</span> <span class="vi">@model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">paranoid_column</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="vi">@from</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="vi">@to</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;not real deleted&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span> <span class="vi">@model</span><span class="o">.</span><span class="n">destroy</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="vi">@model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">unscoped</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;when relation not exists&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;real deleted&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span> <span class="vi">@model</span><span class="o">.</span><span class="n">destroy</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="vi">@model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">unscoped</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをspec_helperなどからrequireするなり読み込めるようにしてもらって<br/>
対象のモデルで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">UserProfile</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'> <span class="n">include_examples</span> <span class="s1">&#39;real delete discreetly&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">base_instance</span><span class="p">:</span> <span class="no">UserProfile</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">nil_or_exist_id</span><span class="p">),</span>
</span><span class='line'> <span class="ss">confirm_relations</span><span class="p">:</span> <span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやると論理削除と物理削除のテストが走ります。<br/>
ただ冒頭でも述べた通りお蔵入りしたのでちゃんと動くかどうか細かい所までは見きれていないです。
何かの参考になれば幸いです。</p>

<p>親のレコードが消された時に連動してdependent: :destroyとかの指定で消える場合は、親のレコードってdestroyed_by_associationに格納されるんですね。<br/>
今回のコードを書いてて初めて知りました。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[開発環境(development)で問題なかったのにdeployしようとしたらprecompileでこける。]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/12/invalid-css-after/"/>
        <updated>2015-03-12T23:58:19+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/12/invalid-css-after</id>
        <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake aborted!
</span><span class='line'>Sass::SyntaxError: Invalid CSS after "...idth: Infinity%": expected expression (e.g. 1px, bold), was "; }"
</span><span class='line'>  (in /var/www/hogehoge/app/assets/stylesheets/fuga/fuga.css.scss)
</span><span class='line'>(sass):12</span></code></pre></td></tr></table></div></figure>


<p>見た目にも問題なさそうだし、念のため<a href="https://github.com/causes/scss-lint">scss-lint</a>とかも通してみたけど問題なさそう。</p>

<!-- more -->


<p></p>

<p>原因究明のためちょっとずつソースを削ってはコンパイルを繰り返したところ、
compile errorになっていた原因はここにありました。
わかりますか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$colNums</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="k">@each</span> <span class="err">$</span><span class="nt">colNum</span> <span class="nt">in</span> <span class="err">$</span><span class="nt">colNums</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nc">.col-</span><span class="si">#{</span><span class="nv">$colNum</span><span class="si">}</span><span class="p">{</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span> <span class="o">/</span> <span class="nv">$colNum</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラー文言がsyntax error的なので構文エラーな箇所を必死に探していました。
結局0で割ってるからというどうしようもないミスでした。
結果こうなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$colNums</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="k">@each</span> <span class="err">$</span><span class="nt">colNum</span> <span class="nt">in</span> <span class="err">$</span><span class="nt">colNums</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nc">.col-</span><span class="si">#{</span><span class="nv">$colNum</span><span class="si">}</span><span class="p">{</span>
</span><span class='line'>    <span class="k">@if</span> <span class="nv">$colNum</span> <span class="o">==</span> <span class="mi">0</span><span class="p">{</span>
</span><span class='line'>      <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">@else</span><span class="p">{</span>
</span><span class='line'>      <span class="na">width</span><span class="o">:</span> <span class="p">(</span><span class="mi">100</span><span class="kt">%</span> <span class="o">/</span> <span class="nv">$colNum</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[GithubPageに移行しました]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/03/10/githubpageniyi-xing-simasita/"/>
        <updated>2015-03-10T20:56:12+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/03/10/githubpageniyi-xing-simasita</id>
        <content type="html"><![CDATA[<p>移行してみました。<br/>
とりあえずそれだけです。</p>

<p>あらためてこちらでもよろしくお願いします。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxでエクセルのセルを折り返して全体を表示]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/02/24/20150224142535/"/>
        <updated>2015-02-24T14:25:12+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/02/24/20150224142535</id>
        <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="o">=</span> <span class="no">Axlsx</span><span class="o">::</span><span class="no">Package</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">sheet</span> <span class="o">=</span> <span class="n">package</span><span class="o">.</span><span class="n">workbook</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;lists&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">wrap_text</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">add_style</span><span class="p">(</span>
</span><span class='line'>                              <span class="p">{</span>
</span><span class='line'>                               <span class="ss">:fg_color</span><span class="o">=&gt;</span> <span class="s2">&quot;FFFFFF&quot;</span><span class="p">,</span>                           <span class="c1"># 文字色</span>
</span><span class='line'>                               <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>                                     <span class="c1"># 太字</span>
</span><span class='line'>                               <span class="ss">:bg_color</span> <span class="o">=&gt;</span> <span class="s2">&quot;004586&quot;</span><span class="p">,</span>                          <span class="c1"># 背景色</span>
</span><span class='line'>                               <span class="ss">:sz</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span>                                      <span class="c1"># フォントサイズ</span>
</span><span class='line'>                               <span class="ss">:border</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="ss">:thin</span><span class="p">,</span> <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="s2">&quot;00&quot;</span> <span class="p">},</span> <span class="c1"># 罫線</span>
</span><span class='line'>                               <span class="ss">:alignment</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:horizontal</span> <span class="o">=&gt;</span> <span class="ss">:center</span><span class="p">,</span>         <span class="c1"># 配置</span>
</span><span class='line'>                                               <span class="ss">:vertical</span> <span class="o">=&gt;</span> <span class="ss">:center</span> <span class="p">,</span>
</span><span class='line'>                                               <span class="ss">:wrap_text</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>                              <span class="p">}</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;とっても長いテキスト&#39;</span><span class="p">,</span> <span class="s1">&#39;短いテキスト&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="n">wrap_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">column_info</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">package</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s1">&#39;test.xlsx&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Axlsxでウィンドウ枠の固定]]></title>
        <link href="http://yoshitsugufujii.github.io/blog/2015/02/23/20150223110642/"/>
        <updated>2015-02-23T11:06:00+09:00</updated>
        <id>http://yoshitsugufujii.github.io/blog/2015/02/23/20150223110642</id>
        <content type="html"><![CDATA[<p>エクセルのウィンドウ枠の固定をAxlsxで行う方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;axlsx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="o">=</span> <span class="no">Axlsx</span><span class="o">::</span><span class="no">Package</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">sheet</span> <span class="o">=</span> <span class="n">package</span><span class="o">.</span><span class="n">workbook</span><span class="o">.</span><span class="n">add_worksheet</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;lists&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;品名&#39;</span><span class="p">,</span> <span class="s1">&#39;単価&#39;</span><span class="p">,</span> <span class="s1">&#39;数量&#39;</span><span class="p">,</span> <span class="s1">&#39;計&#39;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">add_row</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;にんじん&#39;</span><span class="p">,</span>    <span class="mi">80</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>      <span class="s1">&#39;=B2*C2&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="n">sheet_view</span><span class="o">.</span><span class="n">pane</span> <span class="k">do</span> <span class="o">|</span><span class="n">pane</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pane</span><span class="o">.</span><span class="n">top_left_cell</span> <span class="o">=</span> <span class="s2">&quot;B2&quot;</span>
</span><span class='line'>  <span class="n">pane</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="ss">:frozen_split</span>
</span><span class='line'>  <span class="n">pane</span><span class="o">.</span><span class="n">y_split</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">pane</span><span class="o">.</span><span class="n">x_split</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">pane</span><span class="o">.</span><span class="n">active_pane</span> <span class="o">=</span> <span class="ss">:bottom_right</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="s1">&#39;test.xlsx&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    </entry>
    
</feed>
